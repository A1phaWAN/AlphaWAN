<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\AT\AT.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\AT\AT.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6220000: Last Updated: Thu Jun 12 09:56:01 2025
<BR><P>
<H3>Maximum Stack Usage =       1088 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
LmHandlerProcess &rArr; LoRaMacProcess &rArr; LoRaMacCryptoUnsecureMessage &rArr; SecureElementVerifyAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[11a]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[35]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[35]">ADC_IRQHandler</a><BR>
 <LI><a href="#[1d]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">BusFault_Handler</a><BR>
 <LI><a href="#[1b]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">HardFault_Handler</a><BR>
 <LI><a href="#[1c]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">MemManage_Handler</a><BR>
 <LI><a href="#[1a]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a]">NMI_Handler</a><BR>
 <LI><a href="#[1e]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">UsageFault_Handler</a><BR>
 <LI><a href="#[ce]">RadioSetModem</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ce]">RadioSetModem</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[35]">ADC_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[56]">AES_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[a8]">AT_ADR_get</a> from lora_at.o(.text.AT_ADR_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[a9]">AT_ADR_set</a> from lora_at.o(.text.AT_ADR_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[99]">AT_AppKey_get</a> from lora_at.o(.text.AT_AppKey_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[9a]">AT_AppKey_set</a> from lora_at.o(.text.AT_AppKey_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[9d]">AT_AppSKey_get</a> from lora_at.o(.text.AT_AppSKey_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[9e]">AT_AppSKey_set</a> from lora_at.o(.text.AT_AppSKey_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[ca]">AT_Certif</a> from lora_at.o(.text.AT_Certif) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[aa]">AT_DataRate_get</a> from lora_at.o(.text.AT_DataRate_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[ab]">AT_DataRate_set</a> from lora_at.o(.text.AT_DataRate_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[9f]">AT_DevAddr_get</a> from lora_at.o(.text.AT_DevAddr_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[a0]">AT_DevAddr_set</a> from lora_at.o(.text.AT_DevAddr_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[a1]">AT_DevEUI_get</a> from lora_at.o(.text.AT_DevEUI_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[a2]">AT_DevEUI_set</a> from lora_at.o(.text.AT_DevEUI_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[ae]">AT_DeviceClass_get</a> from lora_at.o(.text.AT_DeviceClass_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[af]">AT_DeviceClass_set</a> from lora_at.o(.text.AT_DeviceClass_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[b0]">AT_DutyCycle_get</a> from lora_at.o(.text.AT_DutyCycle_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[b1]">AT_DutyCycle_set</a> from lora_at.o(.text.AT_DutyCycle_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[a5]">AT_Join</a> from lora_at.o(.text.AT_Join) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[b2]">AT_JoinAcceptDelay1_get</a> from lora_at.o(.text.AT_JoinAcceptDelay1_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[b3]">AT_JoinAcceptDelay1_set</a> from lora_at.o(.text.AT_JoinAcceptDelay1_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[b4]">AT_JoinAcceptDelay2_get</a> from lora_at.o(.text.AT_JoinAcceptDelay2_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[b5]">AT_JoinAcceptDelay2_set</a> from lora_at.o(.text.AT_JoinAcceptDelay2_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[95]">AT_JoinEUI_get</a> from lora_at.o(.text.AT_JoinEUI_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[96]">AT_JoinEUI_set</a> from lora_at.o(.text.AT_JoinEUI_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[a6]">AT_Link_Check</a> from lora_at.o(.text.AT_Link_Check) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[91]">AT_LocalTime_get</a> from lora_at.o(.text.AT_LocalTime_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[a3]">AT_NetworkID_get</a> from lora_at.o(.text.AT_NetworkID_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[a4]">AT_NetworkID_set</a> from lora_at.o(.text.AT_NetworkID_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[97]">AT_NwkKey_get</a> from lora_at.o(.text.AT_NwkKey_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[98]">AT_NwkKey_set</a> from lora_at.o(.text.AT_NwkKey_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[9b]">AT_NwkSKey_get</a> from lora_at.o(.text.AT_NwkSKey_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[9c]">AT_NwkSKey_set</a> from lora_at.o(.text.AT_NwkSKey_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[c0]">AT_PingSlot_get</a> from lora_at.o(.text.AT_PingSlot_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[c1]">AT_PingSlot_set</a> from lora_at.o(.text.AT_PingSlot_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[ac]">AT_Region_get</a> from lora_at.o(.text.AT_Region_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[ad]">AT_Region_set</a> from lora_at.o(.text.AT_Region_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[b6]">AT_Rx1Delay_get</a> from lora_at.o(.text.AT_Rx1Delay_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[b7]">AT_Rx1Delay_set</a> from lora_at.o(.text.AT_Rx1Delay_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[ba]">AT_Rx2DataRate_get</a> from lora_at.o(.text.AT_Rx2DataRate_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[bb]">AT_Rx2DataRate_set</a> from lora_at.o(.text.AT_Rx2DataRate_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[b8]">AT_Rx2Delay_get</a> from lora_at.o(.text.AT_Rx2Delay_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[b9]">AT_Rx2Delay_set</a> from lora_at.o(.text.AT_Rx2Delay_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[bc]">AT_Rx2Frequency_get</a> from lora_at.o(.text.AT_Rx2Frequency_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[bd]">AT_Rx2Frequency_set</a> from lora_at.o(.text.AT_Rx2Frequency_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[a7]">AT_Send</a> from lora_at.o(.text.AT_Send) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[be]">AT_TransmitPower_get</a> from lora_at.o(.text.AT_TransmitPower_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[bf]">AT_TransmitPower_set</a> from lora_at.o(.text.AT_TransmitPower_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[cb]">AT_bat_get</a> from lora_at.o(.text.AT_bat_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[92]">AT_reset</a> from lora_at.o(.text.AT_reset) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[93]">AT_restore_factory_settings</a> from lora_at.o(.text.AT_restore_factory_settings) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[8e]">AT_return_error</a> from lora_at.o(.text.AT_return_error) referenced 55 times from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[94]">AT_store_context</a> from lora_at.o(.text.AT_store_context) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[c4]">AT_test_get_config</a> from lora_at.o(.text.AT_test_get_config) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[c7]">AT_test_rx</a> from lora_at.o(.text.AT_test_rx) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[c3]">AT_test_rxRssi</a> from lora_at.o(.text.AT_test_rxRssi) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[c5]">AT_test_set_config</a> from lora_at.o(.text.AT_test_set_config) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[c9]">AT_test_stop</a> from lora_at.o(.text.AT_test_stop) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[c6]">AT_test_tx</a> from lora_at.o(.text.AT_test_tx) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[c2]">AT_test_txTone</a> from lora_at.o(.text.AT_test_txTone) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[c8]">AT_test_tx_hopping</a> from lora_at.o(.text.AT_test_tx_hopping) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[8f]">AT_verbose_get</a> from lora_at.o(.text.AT_verbose_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[90]">AT_verbose_set</a> from lora_at.o(.text.AT_verbose_set) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[8d]">AT_version_get</a> from lora_at.o(.text.AT_version_get) referenced from lora_command.o(.rodata.ATCommand)
 <LI><a href="#[1d]">BusFault_Handler</a> from stm32wlxx_it.o(.text.BusFault_Handler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[37]">C2SEV_PWR_C2H_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[65]">CMD_GetChar</a> from lora_command.o(.text.CMD_GetChar) referenced 2 times from lora_command.o(.text.CMD_Init)
 <LI><a href="#[7e]">CMD_Process</a> from lora_command.o(.text.CMD_Process) referenced 2 times from lora_app.o(.text.LoRaWAN_Init)
 <LI><a href="#[38]">COMP_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[64]">CertifSend</a> from lora_at.o(.text.CertifSend) referenced 2 times from lora_at.o(.text.AT_Certif)
 <LI><a href="#[7c]">CmdProcessNotify</a> from lora_app.o(.text.CmdProcessNotify) referenced 2 times from lora_app.o(.text.LoRaWAN_Init)
 <LI><a href="#[36]">DAC_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[2e]">DMA1_Channel1_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[2f]">DMA1_Channel2_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[30]">DMA1_Channel3_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[31]">DMA1_Channel4_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[32]">DMA1_Channel5_IRQHandler</a> from stm32wlxx_it.o(.text.DMA1_Channel5_IRQHandler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[33]">DMA1_Channel6_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[34]">DMA1_Channel7_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[59]">DMA2_Channel1_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[5a]">DMA2_Channel2_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[5b]">DMA2_Channel3_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[5c]">DMA2_Channel4_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[5d]">DMA2_Channel5_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[5e]">DMA2_Channel6_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[5f]">DMA2_Channel7_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[60]">DMAMUX1_OVR_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[20]">DebugMon_Handler</a> from stm32wlxx_it.o(.text.DebugMon_Handler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[29]">EXTI0_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[4c]">EXTI15_10_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[2a]">EXTI1_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[2b]">EXTI2_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[2c]">EXTI3_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[2d]">EXTI4_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[39]">EXTI9_5_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[27]">FLASH_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[0]">GetBatteryLevel</a> from sys_app.o(.text.GetBatteryLevel) referenced 2 times from lora_app.o(.data..L_MergedGlobals)
 <LI><a href="#[3]">GetDevAddr</a> from sys_app.o(.text.GetDevAddr) referenced 2 times from lora_app.o(.data..L_MergedGlobals)
 <LI><a href="#[1]">GetTemperatureLevel</a> from sys_app.o(.text.GetTemperatureLevel) referenced 2 times from lora_app.o(.data..L_MergedGlobals)
 <LI><a href="#[2]">GetUniqueId</a> from sys_app.o(.text.GetUniqueId) referenced 2 times from lora_app.o(.data..L_MergedGlobals)
 <LI><a href="#[52]">HSEM_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[1b]">HardFault_Handler</a> from stm32wlxx_it.o(.text.HardFault_Handler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[42]">I2C1_ER_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[41]">I2C1_EV_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[44]">I2C2_ER_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[43]">I2C2_EV_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[54]">I2C3_ER_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[53]">I2C3_EV_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[50]">IPCC_C1_RX_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[51]">IPCC_C1_TX_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[4a]">LPTIM1_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[4b]">LPTIM2_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[4e]">LPTIM3_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[49]">LPUART1_IRQHandler</a> from stm32wlxx_it.o(.text.LPUART1_IRQHandler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[71]">LmHandlerDeviceTimeReq</a> from lmhandler.o(.text.LmHandlerDeviceTimeReq) referenced 2 times from lmhandler.o(.text.LmHandlerInit)
 <LI><a href="#[6f]">LmHandlerJoin</a> from lmhandler.o(.text.LmHandlerJoin) referenced 2 times from lmhandler.o(.text.LmHandlerInit)
 <LI><a href="#[7d]">LmHandlerProcess</a> from lmhandler.o(.text.LmHandlerProcess) referenced 2 times from lora_app.o(.text.LoRaWAN_Init)
 <LI><a href="#[70]">LmHandlerSend</a> from lmhandler.o(.text.LmHandlerSend) referenced 2 times from lmhandler.o(.text.LmHandlerInit)
 <LI><a href="#[12]">LmhpComplianceInit</a> from lmhpcompliance.o(.text.LmhpComplianceInit) referenced 2 times from lmhpcompliance.o(.data.LmhpCompliancePackage)
 <LI><a href="#[13]">LmhpComplianceIsInitialized</a> from lmhpcompliance.o(.text.LmhpComplianceIsInitialized) referenced 2 times from lmhpcompliance.o(.data.LmhpCompliancePackage)
 <LI><a href="#[14]">LmhpComplianceIsRunning</a> from lmhpcompliance.o(.text.LmhpComplianceIsRunning) referenced 2 times from lmhpcompliance.o(.data.LmhpCompliancePackage)
 <LI><a href="#[16]">LmhpComplianceOnMcpsConfirm</a> from lmhpcompliance.o(.text.LmhpComplianceOnMcpsConfirm) referenced 2 times from lmhpcompliance.o(.data.LmhpCompliancePackage)
 <LI><a href="#[17]">LmhpComplianceOnMcpsIndication</a> from lmhpcompliance.o(.text.LmhpComplianceOnMcpsIndication) referenced 2 times from lmhpcompliance.o(.data.LmhpCompliancePackage)
 <LI><a href="#[18]">LmhpComplianceOnMlmeConfirm</a> from lmhpcompliance.o(.text.LmhpComplianceOnMlmeConfirm) referenced 2 times from lmhpcompliance.o(.data.LmhpCompliancePackage)
 <LI><a href="#[15]">LmhpComplianceProcess</a> from lmhpcompliance.o(.text.LmhpComplianceProcess) referenced 2 times from lmhpcompliance.o(.data.LmhpCompliancePackage)
 <LI><a href="#[6a]">McpsConfirm</a> from lmhandler.o(.text.McpsConfirm) referenced 2 times from lmhandler.o(.text.LmHandlerInit)
 <LI><a href="#[6b]">McpsIndication</a> from lmhandler.o(.text.McpsIndication) referenced 2 times from lmhandler.o(.text.LmHandlerInit)
 <LI><a href="#[1c]">MemManage_Handler</a> from stm32wlxx_it.o(.text.MemManage_Handler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[6c]">MlmeConfirm</a> from lmhandler.o(.text.MlmeConfirm) referenced 2 times from lmhandler.o(.text.LmHandlerInit)
 <LI><a href="#[6d]">MlmeIndication</a> from lmhandler.o(.text.MlmeIndication) referenced 2 times from lmhandler.o(.text.LmHandlerInit)
 <LI><a href="#[1a]">NMI_Handler</a> from stm32wlxx_it.o(.text.NMI_Handler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[6e]">NvmDataMgmtEvent</a> from nvmdatamgmt.o(.text.NvmDataMgmtEvent) referenced 2 times from lmhandler.o(.text.LmHandlerInit)
 <LI><a href="#[76]">OnAckTimeoutTimerEvent</a> from loramac.o(.text.OnAckTimeoutTimerEvent) referenced 2 times from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[c]">OnBeaconStatusChange</a> from lora_app.o(.text.OnBeaconStatusChange) referenced 2 times from lora_app.o(.data..L_MergedGlobals)
 <LI><a href="#[63]">OnCertifTimer</a> from lora_at.o(.text.OnCertifTimer) referenced 2 times from lora_at.o(.text.AT_Certif)
 <LI><a href="#[b]">OnClassChange</a> from lora_app.o(.text.OnClassChange) referenced 2 times from lora_app.o(.data..L_MergedGlobals)
 <LI><a href="#[72]">OnComplianceTxNextPacketTimerEvent</a> from lmhpcompliance.o(.text.OnComplianceTxNextPacketTimerEvent) referenced 2 times from lmhpcompliance.o(.text.LmhpComplianceOnMcpsIndication)
 <LI><a href="#[8]">OnJoinRequest</a> from lora_app.o(.text.OnJoinRequest) referenced 2 times from lora_app.o(.data..L_MergedGlobals)
 <LI><a href="#[6]">OnMacProcessNotify</a> from lora_app.o(.text.OnMacProcessNotify) referenced 2 times from lora_app.o(.data..L_MergedGlobals)
 <LI><a href="#[7]">OnNvmDataChange</a> from lora_app.o(.text.OnNvmDataChange) referenced 2 times from lora_app.o(.data..L_MergedGlobals)
 <LI><a href="#[10]">OnPingSlotPeriodicityChanged</a> from lora_app.o(.text.OnPingSlotPeriodicityChanged) referenced 2 times from lora_app.o(.data..L_MergedGlobals)
 <LI><a href="#[77]">OnRadioRxDone</a> from loramac.o(.text.OnRadioRxDone) referenced 2 times from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[7b]">OnRadioRxError</a> from loramac.o(.text.OnRadioRxError) referenced 2 times from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[78]">OnRadioRxTimeout</a> from loramac.o(.text.OnRadioRxTimeout) referenced 2 times from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[79]">OnRadioTxDone</a> from loramac.o(.text.OnRadioTxDone) referenced 2 times from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[7a]">OnRadioTxTimeout</a> from loramac.o(.text.OnRadioTxTimeout) referenced 2 times from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[4]">OnRestoreContextRequest</a> from lora_app.o(.text.OnRestoreContextRequest) referenced 2 times from lora_app.o(.data..L_MergedGlobals)
 <LI><a href="#[a]">OnRxData</a> from lora_app.o(.text.OnRxData) referenced 2 times from lora_app.o(.data..L_MergedGlobals)
 <LI><a href="#[84]">OnRxDone</a> from test_rf.o(.text.OnRxDone) referenced 2 times from test_rf.o(.text.TST_RX_Start)
 <LI><a href="#[84]">OnRxDone</a> from test_rf.o(.text.OnRxDone) referenced 2 times from test_rf.o(.text.TST_TX_Start)
 <LI><a href="#[87]">OnRxError</a> from test_rf.o(.text.OnRxError) referenced 2 times from test_rf.o(.text.TST_RX_Start)
 <LI><a href="#[87]">OnRxError</a> from test_rf.o(.text.OnRxError) referenced 2 times from test_rf.o(.text.TST_TX_Start)
 <LI><a href="#[86]">OnRxTimeout</a> from test_rf.o(.text.OnRxTimeout) referenced 2 times from test_rf.o(.text.TST_RX_Start)
 <LI><a href="#[86]">OnRxTimeout</a> from test_rf.o(.text.OnRxTimeout) referenced 2 times from test_rf.o(.text.TST_TX_Start)
 <LI><a href="#[74]">OnRxWindow1TimerEvent</a> from loramac.o(.text.OnRxWindow1TimerEvent) referenced 2 times from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[75]">OnRxWindow2TimerEvent</a> from loramac.o(.text.OnRxWindow2TimerEvent) referenced 2 times from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[5]">OnStoreContextRequest</a> from lora_app.o(.text.OnStoreContextRequest) referenced 2 times from lora_app.o(.data..L_MergedGlobals)
 <LI><a href="#[d]">OnSysTimeUpdate</a> from lora_app.o(.text.OnSysTimeUpdate) referenced 2 times from lora_app.o(.data..L_MergedGlobals)
 <LI><a href="#[11]">OnSystemReset</a> from lora_app.o(.text.OnSystemReset) referenced 2 times from lora_app.o(.data..L_MergedGlobals)
 <LI><a href="#[9]">OnTxData</a> from lora_app.o(.text.OnTxData) referenced 2 times from lora_app.o(.data..L_MergedGlobals)
 <LI><a href="#[73]">OnTxDelayedTimerEvent</a> from loramac.o(.text.OnTxDelayedTimerEvent) referenced 2 times from loramac.o(.text.LoRaMacInitialization)
 <LI><a href="#[83]">OnTxDone</a> from test_rf.o(.text.OnTxDone) referenced 2 times from test_rf.o(.text.TST_RX_Start)
 <LI><a href="#[83]">OnTxDone</a> from test_rf.o(.text.OnTxDone) referenced 2 times from test_rf.o(.text.TST_TX_Start)
 <LI><a href="#[f]">OnTxFrameCtrlChanged</a> from lora_app.o(.text.OnTxFrameCtrlChanged) referenced 2 times from lora_app.o(.data..L_MergedGlobals)
 <LI><a href="#[e]">OnTxPeriodicityChanged</a> from lora_app.o(.text.OnTxPeriodicityChanged) referenced 2 times from lora_app.o(.data..L_MergedGlobals)
 <LI><a href="#[85]">OnTxTimeout</a> from test_rf.o(.text.OnTxTimeout) referenced 2 times from test_rf.o(.text.TST_RX_Start)
 <LI><a href="#[85]">OnTxTimeout</a> from test_rf.o(.text.OnTxTimeout) referenced 2 times from test_rf.o(.text.TST_TX_Start)
 <LI><a href="#[58]">PKA_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[24]">PVD_PVM_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[f3]">PWR_EnterOffMode</a> from stm32_lpm_if.o(.text.PWR_EnterOffMode) referenced from stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
 <LI><a href="#[ef]">PWR_EnterSleepMode</a> from stm32_lpm_if.o(.text.PWR_EnterSleepMode) referenced from stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
 <LI><a href="#[f1]">PWR_EnterStopMode</a> from stm32_lpm_if.o(.text.PWR_EnterStopMode) referenced from stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
 <LI><a href="#[f4]">PWR_ExitOffMode</a> from stm32_lpm_if.o(.text.PWR_ExitOffMode) referenced from stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
 <LI><a href="#[f0]">PWR_ExitSleepMode</a> from stm32_lpm_if.o(.text.PWR_ExitSleepMode) referenced from stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
 <LI><a href="#[f2]">PWR_ExitStopMode</a> from stm32_lpm_if.o(.text.PWR_ExitStopMode) referenced from stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
 <LI><a href="#[21]">PendSV_Handler</a> from stm32wlxx_it.o(.text.PendSV_Handler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[28]">RCC_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[ec]">RFW_ReceiveLongPacket</a> from radio_fw.o(.text.RFW_ReceiveLongPacket) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[eb]">RFW_TransmitLongPacket</a> from radio_fw.o(.text.RFW_TransmitLongPacket) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[57]">RNG_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[4d]">RTC_Alarm_IRQHandler</a> from stm32wlxx_it.o(.text.RTC_Alarm_IRQHandler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[26]">RTC_WKUP_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[d4]">RadioCheckRfFrequency</a> from radio.o(.text.RadioCheckRfFrequency) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[cd]">RadioGetStatus</a> from radio.o(.text.RadioGetStatus) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[e3]">RadioGetWakeupTime</a> from radio.o(.text.RadioGetWakeupTime) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[cc]">RadioInit</a> from radio.o(.text.RadioInit) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[e4]">RadioIrqProcess</a> from radio.o(.text.RadioIrqProcess) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[d0]">RadioIsChannelFree</a> from radio.o(.text.RadioIsChannelFree) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[ee]">RadioLrFhssGetTimeOnAirInMs</a> from radio.o(.text.RadioLrFhssGetTimeOnAirInMs) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[ed]">RadioLrFhssSetCfg</a> from radio.o(.text.RadioLrFhssSetCfg) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[7f]">RadioOnDioIrq</a> from radio.o(.text.RadioOnDioIrq) referenced 2 times from radio.o(.text.RadioInit)
 <LI><a href="#[81]">RadioOnRxTimeoutIrq</a> from radio.o(.text.RadioOnRxTimeoutIrq) referenced 2 times from radio.o(.text.RadioInit)
 <LI><a href="#[80]">RadioOnTxTimeoutIrq</a> from radio.o(.text.RadioOnTxTimeoutIrq) referenced 2 times from radio.o(.text.RadioInit)
 <LI><a href="#[d1]">RadioRandom</a> from radio.o(.text.RadioRandom) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[de]">RadioRead</a> from radio.o(.text.RadioRead) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[e0]">RadioReadRegisters</a> from radio.o(.text.RadioReadRegisters) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[dc]">RadioRssi</a> from radio.o(.text.RadioRssi) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[d9]">RadioRx</a> from radio.o(.text.RadioRx) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[e5]">RadioRxBoosted</a> from radio.o(.text.RadioRxBoosted) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[d6]">RadioSend</a> from radio.o(.text.RadioSend) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[cf]">RadioSetChannel</a> from radio.o(.text.RadioSetChannel) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[e1]">RadioSetMaxPayloadLength</a> from radio.o(.text.RadioSetMaxPayloadLength) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[ce]">RadioSetModem</a> from radio.o(.text.RadioSetModem) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[e2]">RadioSetPublicNetwork</a> from radio.o(.text.RadioSetPublicNetwork) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[d2]">RadioSetRxConfig</a> from radio.o(.text.RadioSetRxConfig) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[e6]">RadioSetRxDutyCycle</a> from radio.o(.text.RadioSetRxDutyCycle) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[e9]">RadioSetRxGenericConfig</a> from radio.o(.text.RadioSetRxGenericConfig) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[d3]">RadioSetTxConfig</a> from radio.o(.text.RadioSetTxConfig) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[db]">RadioSetTxContinuousWave</a> from radio.o(.text.RadioSetTxContinuousWave) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[ea]">RadioSetTxGenericConfig</a> from radio.o(.text.RadioSetTxGenericConfig) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[d7]">RadioSleep</a> from radio.o(.text.RadioSleep) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[d8]">RadioStandby</a> from radio.o(.text.RadioStandby) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[da]">RadioStartCad</a> from radio.o(.text.RadioStartCad) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[d5]">RadioTimeOnAir</a> from radio.o(.text.RadioTimeOnAir) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[e8]">RadioTxCw</a> from radio.o(.text.RadioTxCw) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[e7]">RadioTxPrbs</a> from radio.o(.text.RadioTxPrbs) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[dd]">RadioWrite</a> from radio.o(.text.RadioWrite) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[df]">RadioWriteRegisters</a> from radio.o(.text.RadioWriteRegisters) referenced from radio.o(.rodata.Radio)
 <LI><a href="#[19]">Reset_Handler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[45]">SPI1_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[46]">SPI2_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[4f]">SUBGHZSPI_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[55]">SUBGHZ_Radio_IRQHandler</a> from stm32wlxx_it.o(.text.SUBGHZ_Radio_IRQHandler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[1f]">SVC_Handler</a> from stm32wlxx_it.o(.text.SVC_Handler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[22]">SysTick_Handler</a> from stm32wlxx_it.o(.text.SysTick_Handler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[61]">SystemInit</a> from system_stm32wlxx.o(.text.SystemInit) referenced from startup_stm32wl55xx_cm4.o(.text)
 <LI><a href="#[25]">TAMP_STAMP_LSECSS_SSRU_IRQHandler</a> from stm32wlxx_it.o(.text.TAMP_STAMP_LSECSS_SSRU_IRQHandler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[3f]">TIM16_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[40]">TIM17_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[3a]">TIM1_BRK_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[3d]">TIM1_CC_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[3c]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[3b]">TIM1_UP_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[3e]">TIM2_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[f6]">TIMER_IF_BkUp_Read_Seconds</a> from timer_if.o(.text.TIMER_IF_BkUp_Read_Seconds) referenced from timer_if.o(.rodata.UTIL_SYSTIMDriver)
 <LI><a href="#[f8]">TIMER_IF_BkUp_Read_SubSeconds</a> from timer_if.o(.text.TIMER_IF_BkUp_Read_SubSeconds) referenced from timer_if.o(.rodata.UTIL_SYSTIMDriver)
 <LI><a href="#[f5]">TIMER_IF_BkUp_Write_Seconds</a> from timer_if.o(.text.TIMER_IF_BkUp_Write_Seconds) referenced from timer_if.o(.rodata.UTIL_SYSTIMDriver)
 <LI><a href="#[f7]">TIMER_IF_BkUp_Write_SubSeconds</a> from timer_if.o(.text.TIMER_IF_BkUp_Write_SubSeconds) referenced from timer_if.o(.rodata.UTIL_SYSTIMDriver)
 <LI><a href="#[103]">TIMER_IF_Convert_Tick2ms</a> from timer_if.o(.text.TIMER_IF_Convert_Tick2ms) referenced from timer_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[102]">TIMER_IF_Convert_ms2Tick</a> from timer_if.o(.text.TIMER_IF_Convert_ms2Tick) referenced from timer_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[101]">TIMER_IF_GetMinimumTimeout</a> from timer_if.o(.text.TIMER_IF_GetMinimumTimeout) referenced from timer_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[f9]">TIMER_IF_GetTime</a> from timer_if.o(.text.TIMER_IF_GetTime) referenced from timer_if.o(.rodata.UTIL_SYSTIMDriver)
 <LI><a href="#[fe]">TIMER_IF_GetTimerContext</a> from timer_if.o(.text.TIMER_IF_GetTimerContext) referenced from timer_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[ff]">TIMER_IF_GetTimerElapsedTime</a> from timer_if.o(.text.TIMER_IF_GetTimerElapsedTime) referenced from timer_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[100]">TIMER_IF_GetTimerValue</a> from timer_if.o(.text.TIMER_IF_GetTimerValue) referenced from timer_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[fa]">TIMER_IF_Init</a> from timer_if.o(.text.TIMER_IF_Init) referenced from timer_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[fd]">TIMER_IF_SetTimerContext</a> from timer_if.o(.text.TIMER_IF_SetTimerContext) referenced from timer_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[fb]">TIMER_IF_StartTimer</a> from timer_if.o(.text.TIMER_IF_StartTimer) referenced from timer_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[fc]">TIMER_IF_StopTimer</a> from timer_if.o(.text.TIMER_IF_StopTimer) referenced from timer_if.o(.rodata.UTIL_TimerDriver)
 <LI><a href="#[8c]">TRACE_TxCpltCallback</a> from stm32_adv_trace.o(.text.TRACE_TxCpltCallback) referenced 2 times from stm32_adv_trace.o(.text.UTIL_ADV_TRACE_Init)
 <LI><a href="#[82]">TimestampNow</a> from sys_app.o(.text.TimestampNow) referenced 2 times from sys_app.o(.text.SystemApp_Init)
 <LI><a href="#[66]">UART_DMAAbortOnError</a> from stm32wlxx_hal_uart.o(.text.UART_DMAAbortOnError) referenced 2 times from stm32wlxx_hal_uart.o(.text.HAL_UART_IRQHandler)
 <LI><a href="#[67]">UART_DMAError</a> from stm32wlxx_hal_uart.o(.text.UART_DMAError) referenced 2 times from stm32wlxx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[68]">UART_DMATransmitCplt</a> from stm32wlxx_hal_uart.o(.text.UART_DMATransmitCplt) referenced 2 times from stm32wlxx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[69]">UART_DMATxHalfCplt</a> from stm32wlxx_hal_uart.o(.text.UART_DMATxHalfCplt) referenced 2 times from stm32wlxx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
 <LI><a href="#[88]">UART_RxISR_16BIT</a> from stm32wlxx_hal_uart.o(.text.UART_RxISR_16BIT) referenced 2 times from stm32wlxx_hal_uart.o(.text.UART_RxISR_16BIT_FIFOEN)
 <LI><a href="#[88]">UART_RxISR_16BIT</a> from stm32wlxx_hal_uart.o(.text.UART_RxISR_16BIT) referenced 2 times from stm32wlxx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[8b]">UART_RxISR_16BIT_FIFOEN</a> from stm32wlxx_hal_uart.o(.text.UART_RxISR_16BIT_FIFOEN) referenced 2 times from stm32wlxx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[89]">UART_RxISR_8BIT</a> from stm32wlxx_hal_uart.o(.text.UART_RxISR_8BIT) referenced 2 times from stm32wlxx_hal_uart.o(.text.UART_RxISR_8BIT_FIFOEN)
 <LI><a href="#[89]">UART_RxISR_8BIT</a> from stm32wlxx_hal_uart.o(.text.UART_RxISR_8BIT) referenced 4 times from stm32wlxx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[8a]">UART_RxISR_8BIT_FIFOEN</a> from stm32wlxx_hal_uart.o(.text.UART_RxISR_8BIT_FIFOEN) referenced 4 times from stm32wlxx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[47]">USART1_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[48]">USART2_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[1e]">UsageFault_Handler</a> from stm32wlxx_it.o(.text.UsageFault_Handler) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[23]">WWDG_IRQHandler</a> from startup_stm32wl55xx_cm4.o(.text) referenced from startup_stm32wl55xx_cm4.o(RESET)
 <LI><a href="#[62]">__main</a> from __main.o(!!!main) referenced from startup_stm32wl55xx_cm4.o(.text)
 <LI><a href="#[105]">vcom_DeInit</a> from usart_if.o(.text.vcom_DeInit) referenced from usart_if.o(.rodata.UTIL_TraceDriver)
 <LI><a href="#[104]">vcom_Init</a> from usart_if.o(.text.vcom_Init) referenced from usart_if.o(.rodata.UTIL_TraceDriver)
 <LI><a href="#[106]">vcom_ReceiveInit</a> from usart_if.o(.text.vcom_ReceiveInit) referenced from usart_if.o(.rodata.UTIL_TraceDriver)
 <LI><a href="#[107]">vcom_Trace_DMA</a> from usart_if.o(.text.vcom_Trace_DMA) referenced from usart_if.o(.rodata.UTIL_TraceDriver)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[62]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(.text)
</UL>
<P><STRONG><a name="[108]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[10a]"></a>__scatterload_rt2</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[333]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[334]"></a>__scatterload_loop</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[335]"></a>__decompress</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[336]"></a>__decompress0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[337]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, __scatter.o(!!handler_null), UNUSED)

<P><STRONG><a name="[338]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[10e]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[339]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[33a]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[33b]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[33c]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[33d]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[33e]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[33f]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[340]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[341]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[342]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[343]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[344]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[345]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[346]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[347]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[348]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[349]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[34a]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[34b]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[34c]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[34d]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[34e]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[113]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[34f]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[350]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[351]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[352]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[353]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[354]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[355]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[109]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[356]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[10b]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[10d]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[357]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[10f]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; MX_LoRaWAN_Init &rArr; LoRaWAN_Init &rArr; LmHandlerConfigure &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[358]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[11b]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[112]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[359]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[114]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[19]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>C2SEV_PWR_C2H_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>DMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>DMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>HSEM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>IPCC_C1_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>IPCC_C1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>LPTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>PKA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>SUBGHZSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32wl55xx_cm4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[11a]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32wl55xx_cm4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[310]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_Convert_ms2Tick
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_DelayMs
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetModulationParams
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRfFrequency
</UL>

<P><STRONG><a name="[35a]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_vsnprintf_like
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimestampNow
</UL>

<P><STRONG><a name="[17e]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Process
</UL>

<P><STRONG><a name="[116]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_set_8
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_vsnprintf_like
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>

<P><STRONG><a name="[16b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_RX_Start
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_set_config
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_StartTimer
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915NextChannel
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868InitDefaults
</UL>

<P><STRONG><a name="[35b]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[35c]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[35d]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[35e]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[35f]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[360]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[361]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[10c]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[111]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[362]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[363]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[364]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[365]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[366]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>ADC_Disable</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32wlxx_hal_adc.o(.text.ADC_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
</UL>

<P><STRONG><a name="[11e]"></a>ADC_Enable</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, stm32wlxx_hal_adc.o(.text.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
</UL>

<P><STRONG><a name="[129]"></a>AES_CMAC_Final</STRONG> (Thumb, 1510 bytes, Stack size 144 bytes, cmac.o(.text.AES_CMAC_Final))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = AES_CMAC_Final &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_aes_encrypt
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmac
</UL>

<P><STRONG><a name="[12d]"></a>AES_CMAC_Init</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, cmac.o(.text.AES_CMAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = AES_CMAC_Init &rArr; memset1 &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmac
</UL>

<P><STRONG><a name="[12e]"></a>AES_CMAC_SetKey</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cmac.o(.text.AES_CMAC_SetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = AES_CMAC_SetKey &rArr; lorawan_aes_set_key
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_aes_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmac
</UL>

<P><STRONG><a name="[130]"></a>AES_CMAC_Update</STRONG> (Thumb, 630 bytes, Stack size 48 bytes, cmac.o(.text.AES_CMAC_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = AES_CMAC_Update &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_aes_encrypt
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmac
</UL>

<P><STRONG><a name="[a8]"></a>AT_ADR_get</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lora_at.o(.text.AT_ADR_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = AT_ADR_get &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetAdrEnable
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[a9]"></a>AT_ADR_set</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lora_at.o(.text.AT_ADR_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = AT_ADR_set &rArr; LmHandlerSetAdrEnable &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetAdrEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[99]"></a>AT_AppKey_get</STRONG> (Thumb, 150 bytes, Stack size 128 bytes, lora_at.o(.text.AT_AppKey_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = AT_AppKey_get &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetKey
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[9a]"></a>AT_AppKey_set</STRONG> (Thumb, 148 bytes, Stack size 120 bytes, lora_at.o(.text.AT_AppKey_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = AT_AppKey_set &rArr; tiny_sscanf &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetKey
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[9d]"></a>AT_AppSKey_get</STRONG> (Thumb, 150 bytes, Stack size 128 bytes, lora_at.o(.text.AT_AppSKey_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = AT_AppSKey_get &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetKey
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[9e]"></a>AT_AppSKey_set</STRONG> (Thumb, 148 bytes, Stack size 120 bytes, lora_at.o(.text.AT_AppSKey_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = AT_AppSKey_set &rArr; tiny_sscanf &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetKey
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[ca]"></a>AT_Certif</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lora_at.o(.text.AT_Certif))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = AT_Certif &rArr; LmHandlerJoin &rArr; LoRaMacMlmeRequest &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Create
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoin
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_RegTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[aa]"></a>AT_DataRate_get</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lora_at.o(.text.AT_DataRate_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = AT_DataRate_get &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetTxDatarate
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[ab]"></a>AT_DataRate_set</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lora_at.o(.text.AT_DataRate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = AT_DataRate_set &rArr; tiny_sscanf &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetTxDatarate
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[9f]"></a>AT_DevAddr_get</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, lora_at.o(.text.AT_DevAddr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = AT_DevAddr_get &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetDevAddr
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[a0]"></a>AT_DevAddr_set</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lora_at.o(.text.AT_DevAddr_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = AT_DevAddr_set &rArr; tiny_sscanf &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetDevAddr
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[a1]"></a>AT_DevEUI_get</STRONG> (Thumb, 84 bytes, Stack size 56 bytes, lora_at.o(.text.AT_DevEUI_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = AT_DevEUI_get &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetDevEUI
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[a2]"></a>AT_DevEUI_set</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, lora_at.o(.text.AT_DevEUI_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = AT_DevEUI_set &rArr; tiny_sscanf &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetDevEUI
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[ae]"></a>AT_DeviceClass_get</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, lora_at.o(.text.AT_DeviceClass_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = AT_DeviceClass_get &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetBeaconState
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetCurrentClass
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraInfo_GetPtr
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[af]"></a>AT_DeviceClass_set</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, lora_at.o(.text.AT_DeviceClass_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = AT_DeviceClass_set &rArr; LmHandlerRequestClass &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerRequestClass
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraInfo_GetPtr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[b0]"></a>AT_DutyCycle_get</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lora_at.o(.text.AT_DutyCycle_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = AT_DutyCycle_get &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetDutyCycleEnable
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[b1]"></a>AT_DutyCycle_set</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lora_at.o(.text.AT_DutyCycle_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AT_DutyCycle_set &rArr; LmHandlerSetDutyCycleEnable &rArr; LoRaMacTestSetDutyCycleOn &rArr; RegionVerify &rArr; RegionUS915Verify
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetDutyCycleEnable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[a5]"></a>AT_Join</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lora_at.o(.text.AT_Join))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = AT_Join &rArr; LmHandlerJoin &rArr; LoRaMacMlmeRequest &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[b2]"></a>AT_JoinAcceptDelay1_get</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lora_at.o(.text.AT_JoinAcceptDelay1_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = AT_JoinAcceptDelay1_get &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetJoinRx1Delay
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[b3]"></a>AT_JoinAcceptDelay1_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lora_at.o(.text.AT_JoinAcceptDelay1_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = AT_JoinAcceptDelay1_set &rArr; tiny_sscanf &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetJoinRx1Delay
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[b4]"></a>AT_JoinAcceptDelay2_get</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lora_at.o(.text.AT_JoinAcceptDelay2_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = AT_JoinAcceptDelay2_get &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetJoinRx2Delay
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[b5]"></a>AT_JoinAcceptDelay2_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lora_at.o(.text.AT_JoinAcceptDelay2_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = AT_JoinAcceptDelay2_set &rArr; tiny_sscanf &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetJoinRx2Delay
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[95]"></a>AT_JoinEUI_get</STRONG> (Thumb, 84 bytes, Stack size 56 bytes, lora_at.o(.text.AT_JoinEUI_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = AT_JoinEUI_get &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetAppEUI
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[96]"></a>AT_JoinEUI_set</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, lora_at.o(.text.AT_JoinEUI_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = AT_JoinEUI_set &rArr; tiny_sscanf &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetAppEUI
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[a6]"></a>AT_Link_Check</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lora_at.o(.text.AT_Link_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = AT_Link_Check &rArr; LmHandlerLinkCheckReq &rArr; LoRaMacMlmeRequest &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerLinkCheckReq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[91]"></a>AT_LocalTime_get</STRONG> (Thumb, 80 bytes, Stack size 88 bytes, lora_at.o(.text.AT_LocalTime_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = AT_LocalTime_get &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeLocalTime
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[a3]"></a>AT_NetworkID_get</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lora_at.o(.text.AT_NetworkID_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = AT_NetworkID_get &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetNetworkID
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[a4]"></a>AT_NetworkID_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lora_at.o(.text.AT_NetworkID_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = AT_NetworkID_set &rArr; tiny_sscanf &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetNetworkID
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[97]"></a>AT_NwkKey_get</STRONG> (Thumb, 150 bytes, Stack size 128 bytes, lora_at.o(.text.AT_NwkKey_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = AT_NwkKey_get &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetKey
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[98]"></a>AT_NwkKey_set</STRONG> (Thumb, 148 bytes, Stack size 120 bytes, lora_at.o(.text.AT_NwkKey_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = AT_NwkKey_set &rArr; tiny_sscanf &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetKey
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[9b]"></a>AT_NwkSKey_get</STRONG> (Thumb, 150 bytes, Stack size 128 bytes, lora_at.o(.text.AT_NwkSKey_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = AT_NwkSKey_get &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetKey
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[9c]"></a>AT_NwkSKey_set</STRONG> (Thumb, 148 bytes, Stack size 120 bytes, lora_at.o(.text.AT_NwkSKey_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = AT_NwkSKey_set &rArr; tiny_sscanf &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetKey
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[c0]"></a>AT_PingSlot_get</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lora_at.o(.text.AT_PingSlot_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = AT_PingSlot_get &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetPingPeriodicity
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[c1]"></a>AT_PingSlot_set</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lora_at.o(.text.AT_PingSlot_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = AT_PingSlot_set &rArr; tiny_sscanf &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetPingPeriodicity
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[ac]"></a>AT_Region_get</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lora_at.o(.text.AT_Region_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = AT_Region_get &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetActiveRegion
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[ad]"></a>AT_Region_set</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lora_at.o(.text.AT_Region_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = AT_Region_set &rArr; LmHandlerSetActiveRegion &rArr; LmHandlerConfigure &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetActiveRegion
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[b6]"></a>AT_Rx1Delay_get</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lora_at.o(.text.AT_Rx1Delay_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = AT_Rx1Delay_get &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetRx1Delay
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[b7]"></a>AT_Rx1Delay_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lora_at.o(.text.AT_Rx1Delay_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = AT_Rx1Delay_set &rArr; tiny_sscanf &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetRx1Delay
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[ba]"></a>AT_Rx2DataRate_get</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lora_at.o(.text.AT_Rx2DataRate_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = AT_Rx2DataRate_get &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetRX2Params
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[bb]"></a>AT_Rx2DataRate_set</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, lora_at.o(.text.AT_Rx2DataRate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = AT_Rx2DataRate_set &rArr; tiny_sscanf &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetRX2Params
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetRX2Params
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[b8]"></a>AT_Rx2Delay_get</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lora_at.o(.text.AT_Rx2Delay_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = AT_Rx2Delay_get &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetRx2Delay
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[b9]"></a>AT_Rx2Delay_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lora_at.o(.text.AT_Rx2Delay_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = AT_Rx2Delay_set &rArr; tiny_sscanf &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetRx2Delay
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[bc]"></a>AT_Rx2Frequency_get</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lora_at.o(.text.AT_Rx2Frequency_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = AT_Rx2Frequency_get &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetRX2Params
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[bd]"></a>AT_Rx2Frequency_set</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lora_at.o(.text.AT_Rx2Frequency_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = AT_Rx2Frequency_set &rArr; tiny_sscanf &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetRX2Params
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetRX2Params
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[a7]"></a>AT_Send</STRONG> (Thumb, 424 bytes, Stack size 40 bytes, lora_at.o(.text.AT_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008 + Unknown Stack Size
<LI>Call Chain = AT_Send &rArr; LmHandlerSend &rArr; LmHandlerJoin &rArr; LoRaMacMlmeRequest &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoinStatus
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSend
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[be]"></a>AT_TransmitPower_get</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lora_at.o(.text.AT_TransmitPower_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = AT_TransmitPower_get &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetTxPower
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[bf]"></a>AT_TransmitPower_set</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lora_at.o(.text.AT_TransmitPower_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = AT_TransmitPower_set &rArr; tiny_sscanf &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetTxPower
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[cb]"></a>AT_bat_get</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lora_at.o(.text.AT_bat_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = AT_bat_get &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetBatteryLevel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[160]"></a>AT_event_OnNvmDataChange</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lora_at.o(.text.AT_event_OnNvmDataChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = AT_event_OnNvmDataChange &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnNvmDataChange
</UL>

<P><STRONG><a name="[161]"></a>AT_event_OnRestoreContextRequest</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lora_at.o(.text.AT_event_OnRestoreContextRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AT_event_OnRestoreContextRequest &rArr; FLASH_IF_Read &rArr; UTIL_MEM_cpy_8
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IF_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRestoreContextRequest
</UL>

<P><STRONG><a name="[163]"></a>AT_event_OnStoreContextRequest</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lora_at.o(.text.AT_event_OnStoreContextRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = AT_event_OnStoreContextRequest &rArr; FLASH_IF_Write &rArr; FLASH_IF_INT_Erase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IF_Erase
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IF_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnStoreContextRequest
</UL>

<P><STRONG><a name="[92]"></a>AT_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lora_at.o(.text.AT_reset))
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[93]"></a>AT_restore_factory_settings</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lora_at.o(.text.AT_restore_factory_settings))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = AT_restore_factory_settings &rArr; FLASH_IF_Erase &rArr; FLASH_IF_INT_Erase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IF_Erase
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[8e]"></a>AT_return_error</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lora_at.o(.text.AT_return_error))
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[94]"></a>AT_store_context</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lora_at.o(.text.AT_store_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = AT_store_context &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerNvmDataStore
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[c4]"></a>AT_test_get_config</STRONG> (Thumb, 604 bytes, Stack size 64 bytes, lora_at.o(.text.AT_test_get_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = AT_test_get_config &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_get_config
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[c7]"></a>AT_test_rx</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lora_at.o(.text.AT_test_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = AT_test_rx &rArr; tiny_sscanf &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_RX_Start
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[c3]"></a>AT_test_rxRssi</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lora_at.o(.text.AT_test_rxRssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = AT_test_rxRssi &rArr; TST_RxRssi &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_RxRssi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[c5]"></a>AT_test_set_config</STRONG> (Thumb, 424 bytes, Stack size 160 bytes, lora_at.o(.text.AT_test_set_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = AT_test_set_config &rArr; tiny_sscanf &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_set_config
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_get_config
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[c9]"></a>AT_test_stop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lora_at.o(.text.AT_test_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = AT_test_stop &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_stop
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[c6]"></a>AT_test_tx</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lora_at.o(.text.AT_test_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = AT_test_tx &rArr; tiny_sscanf &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_TX_Start
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[c2]"></a>AT_test_txTone</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lora_at.o(.text.AT_test_txTone))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = AT_test_txTone &rArr; TST_TxTone &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_TxTone
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[c8]"></a>AT_test_tx_hopping</STRONG> (Thumb, 160 bytes, Stack size 104 bytes, lora_at.o(.text.AT_test_tx_hopping))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = AT_test_tx_hopping &rArr; tiny_sscanf &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_TX_Start
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_set_config
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_get_config
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[8f]"></a>AT_verbose_get</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lora_at.o(.text.AT_verbose_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = AT_verbose_get &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_GetVerboseLevel
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[90]"></a>AT_verbose_set</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lora_at.o(.text.AT_verbose_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = AT_verbose_set &rArr; tiny_sscanf &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_sscanf
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_SetVerboseLevel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[8d]"></a>AT_version_get</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, lora_at.o(.text.AT_version_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = AT_version_get &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetVersion
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.rodata.ATCommand)
</UL>
<P><STRONG><a name="[177]"></a>BSP_RADIO_ConfigRFSwitch</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32wlxx_nucleo_radio.o(.text.BSP_RADIO_ConfigRFSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_RADIO_ConfigRFSwitch
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBI_ConfigRFSwitch
</UL>

<P><STRONG><a name="[27b]"></a>BSP_RADIO_GetRFOMaxPowerConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wlxx_nucleo_radio.o(.text.BSP_RADIO_GetRFOMaxPowerConfig))
<BR><BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBI_GetRFOMaxPowerConfig
</UL>

<P><STRONG><a name="[27d]"></a>BSP_RADIO_GetTxConfig</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32wlxx_nucleo_radio.o(.text.BSP_RADIO_GetTxConfig))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBI_GetTxConfig
</UL>

<P><STRONG><a name="[179]"></a>BSP_RADIO_Init</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, stm32wlxx_nucleo_radio.o(.text.BSP_RADIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = BSP_RADIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBI_Init
</UL>

<P><STRONG><a name="[280]"></a>BSP_RADIO_IsDCDC</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32wlxx_nucleo_radio.o(.text.BSP_RADIO_IsDCDC))
<BR><BR>[Called By]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBI_IsDCDC
</UL>

<P><STRONG><a name="[282]"></a>BSP_RADIO_IsTCXO</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32wlxx_nucleo_radio.o(.text.BSP_RADIO_IsTCXO))
<BR><BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBI_IsTCXO
</UL>

<P><STRONG><a name="[1d]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[17b]"></a>CMD_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lora_command.o(.text.CMD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CMD_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_StartRxProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaWAN_Init
</UL>

<P><STRONG><a name="[7e]"></a>CMD_Process</STRONG> (Thumb, 1000 bytes, Stack size 48 bytes, lora_command.o(.text.CMD_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = CMD_Process &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_IsBufferEmpty
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.text.LoRaWAN_Init)
</UL>
<P><STRONG><a name="[220]"></a>Crc32</STRONG> (Thumb, 376 bytes, Stack size 44 bytes, utilities.o(.text.Crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreNvmData
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleNvm
</UL>

<P><STRONG><a name="[181]"></a>DBG_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sys_debug.o(.text.DBG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DBG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_DisableDBGStandbyMode
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_DisableDBGStopMode
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DBGMCU_DisableDBGSleepMode
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
</UL>

<P><STRONG><a name="[32]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wlxx_it.o(.text.DMA1_Channel5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Channel5_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[122]"></a>Error_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SUBGHZ_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadChannels
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_StartTimer
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Resume
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
</UL>

<P><STRONG><a name="[164]"></a>FLASH_IF_Erase</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, flash_if.o(.text.FLASH_IF_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FLASH_IF_Erase &rArr; FLASH_IF_INT_Erase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IF_INT_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_restore_factory_settings
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_event_OnStoreContextRequest
</UL>

<P><STRONG><a name="[162]"></a>FLASH_IF_Read</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, flash_if.o(.text.FLASH_IF_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_IF_Read &rArr; UTIL_MEM_cpy_8
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_cpy_8
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_event_OnRestoreContextRequest
</UL>

<P><STRONG><a name="[165]"></a>FLASH_IF_Write</STRONG> (Thumb, 554 bytes, Stack size 56 bytes, flash_if.o(.text.FLASH_IF_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = FLASH_IF_Write &rArr; FLASH_IF_INT_Erase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_cpy_8
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IF_INT_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_event_OnStoreContextRequest
</UL>

<P><STRONG><a name="[18e]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32wlxx_hal_flash.o(.text.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[0]"></a>GetBatteryLevel</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, sys_app.o(.text.GetBatteryLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GetBatteryLevel &rArr; SYS_GetBatteryLevel &rArr; ADC_ReadChannels &rArr; HAL_ADCEx_Calibration_Start &rArr; ADC_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetBatteryLevel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[3]"></a>GetDevAddr</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sys_app.o(.text.GetDevAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetDevAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetUIDw1
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetUIDw2
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetUIDw0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[1]"></a>GetTemperatureLevel</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sys_app.o(.text.GetTemperatureLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GetTemperatureLevel &rArr; SYS_GetTemperatureLevel &rArr; ADC_ReadChannels &rArr; HAL_ADCEx_Calibration_Start &rArr; ADC_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetTemperatureLevel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[2]"></a>GetUniqueId</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, sys_app.o(.text.GetUniqueId))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetUniqueId
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetUIDw1
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetUIDw2
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetUIDw0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[121]"></a>HAL_ADCEx_Calibration_Start</STRONG> (Thumb, 1128 bytes, Stack size 32 bytes, stm32wlxx_hal_adc_ex.o(.text.HAL_ADCEx_Calibration_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_ADCEx_Calibration_Start &rArr; ADC_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadChannels
</UL>

<P><STRONG><a name="[123]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 590 bytes, Stack size 28 bytes, stm32wlxx_hal_adc.o(.text.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadChannels
</UL>

<P><STRONG><a name="[128]"></a>HAL_ADC_DeInit</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, stm32wlxx_hal_adc.o(.text.HAL_ADC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadChannels
</UL>

<P><STRONG><a name="[127]"></a>HAL_ADC_GetValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32wlxx_hal_adc.o(.text.HAL_ADC_GetValue))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadChannels
</UL>

<P><STRONG><a name="[196]"></a>HAL_ADC_Init</STRONG> (Thumb, 610 bytes, Stack size 24 bytes, stm32wlxx_hal_adc.o(.text.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
</UL>

<P><STRONG><a name="[195]"></a>HAL_ADC_MspDeInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, adc.o(.text.HAL_ADC_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_DeInit
</UL>

<P><STRONG><a name="[197]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, adc.o(.text.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[125]"></a>HAL_ADC_PollForConversion</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, stm32wlxx_hal_adc.o(.text.HAL_ADC_PollForConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_PollForConversion
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadChannels
</UL>

<P><STRONG><a name="[124]"></a>HAL_ADC_Start</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, stm32wlxx_hal_adc.o(.text.HAL_ADC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ADC_Start &rArr; ADC_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadChannels
</UL>

<P><STRONG><a name="[126]"></a>HAL_ADC_Stop</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, stm32wlxx_hal_adc.o(.text.HAL_ADC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ADC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadChannels
</UL>

<P><STRONG><a name="[182]"></a>HAL_DBGMCU_DisableDBGSleepMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wlxx_hal.o(.text.HAL_DBGMCU_DisableDBGSleepMode))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
</UL>

<P><STRONG><a name="[184]"></a>HAL_DBGMCU_DisableDBGStandbyMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wlxx_hal.o(.text.HAL_DBGMCU_DisableDBGStandbyMode))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
</UL>

<P><STRONG><a name="[183]"></a>HAL_DBGMCU_DisableDBGStopMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wlxx_hal.o(.text.HAL_DBGMCU_DisableDBGStopMode))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
</UL>

<P><STRONG><a name="[1cb]"></a>HAL_DMA_Abort</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, stm32wlxx_hal_dma.o(.text.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1cf]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, stm32wlxx_hal_dma.o(.text.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1da]"></a>HAL_DMA_ConfigChannelAttributes</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32wlxx_hal_dma.o(.text.HAL_DMA_ConfigChannelAttributes))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[1d7]"></a>HAL_DMA_DeInit</STRONG> (Thumb, 250 bytes, Stack size 36 bytes, stm32wlxx_hal_dma.o(.text.HAL_DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[185]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, stm32wlxx_hal_dma.o(.text.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_IRQHandler
</UL>

<P><STRONG><a name="[1d9]"></a>HAL_DMA_Init</STRONG> (Thumb, 304 bytes, Stack size 36 bytes, stm32wlxx_hal_dma.o(.text.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Resume
</UL>

<P><STRONG><a name="[1df]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, stm32wlxx_hal_dma.o(.text.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>

<P><STRONG><a name="[198]"></a>HAL_Delay</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, sys_app.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_TX_Start
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_RxRssi
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSleep
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[18b]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, stm32wlxx_hal_flash_ex.o(.text.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IF_INT_Erase
</UL>

<P><STRONG><a name="[18a]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32wlxx_hal_flash.o(.text.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IF_Write
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IF_INT_Erase
</UL>

<P><STRONG><a name="[18d]"></a>HAL_FLASH_Program</STRONG> (Thumb, 402 bytes, Stack size 32 bytes, stm32wlxx_hal_flash.o(.text.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_FLASH_Program
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IF_Write
</UL>

<P><STRONG><a name="[189]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32wlxx_hal_flash.o(.text.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IF_Write
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IF_INT_Erase
</UL>

<P><STRONG><a name="[1d6]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 288 bytes, Stack size 44 bytes, stm32wlxx_hal_gpio.o(.text.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[17a]"></a>HAL_GPIO_Init</STRONG> (Thumb, 398 bytes, Stack size 44 bytes, stm32wlxx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RADIO_Init
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[178]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wlxx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RADIO_ConfigRFSwitch
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RADIO_Init
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[11d]"></a>HAL_GetTick</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sys_app.o(.text.HAL_GetTick))
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_GetTimerValue
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_StopModeWakeUpSourceConfig
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_DeInit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[18f]"></a>HAL_GetUIDw0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wlxx_hal.o(.text.HAL_GetUIDw0))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevAddr
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUniqueId
</UL>

<P><STRONG><a name="[190]"></a>HAL_GetUIDw1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wlxx_hal.o(.text.HAL_GetUIDw1))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevAddr
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUniqueId
</UL>

<P><STRONG><a name="[191]"></a>HAL_GetUIDw2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wlxx_hal.o(.text.HAL_GetUIDw2))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDevAddr
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetUniqueId
</UL>

<P><STRONG><a name="[19a]"></a>HAL_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32wlxx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Init &rArr; HAL_RCC_GetHCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19d]"></a>HAL_InitTick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_app.o(.text.HAL_InitTick))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[19e]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1d8]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32wlxx_hal_cortex.o(.text.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_DeInit
</UL>

<P><STRONG><a name="[1b6]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32wlxx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_MspInit
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[1b5]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32wlxx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_MspInit
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[19b]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32wlxx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1a1]"></a>HAL_PWREx_DisableLowPowerRunMode</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, stm32wlxx_hal_pwr_ex.o(.text.HAL_PWREx_DisableLowPowerRunMode))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSLEEPMode
</UL>

<P><STRONG><a name="[1a0]"></a>HAL_PWREx_EnableLowPowerRunMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wlxx_hal_pwr_ex.o(.text.HAL_PWREx_EnableLowPowerRunMode))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSLEEPMode
</UL>

<P><STRONG><a name="[266]"></a>HAL_PWREx_EnterSTOP2Mode</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32wlxx_hal_pwr_ex.o(.text.HAL_PWREx_EnterSTOP2Mode))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterStopMode
</UL>

<P><STRONG><a name="[1a9]"></a>HAL_PWREx_GetVoltageRange</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wlxx_hal_pwr_ex.o(.text.HAL_PWREx_GetVoltageRange))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[1a3]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wlxx_hal_pwr.o(.text.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19f]"></a>HAL_PWR_EnterSLEEPMode</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32wlxx_hal_pwr.o(.text.HAL_PWR_EnterSLEEPMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_PWR_EnterSLEEPMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_DisableLowPowerRunMode
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableLowPowerRunMode
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterSleepMode
</UL>

<P><STRONG><a name="[1a2]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 532 bytes, Stack size 24 bytes, stm32wlxx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[1a4]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 554 bytes, Stack size 32 bytes, stm32wlxx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_ClockConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19c]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32wlxx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetHCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1a6]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32wlxx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1a7]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32wlxx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1a5]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 242 bytes, Stack size 0 bytes, stm32wlxx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[1a8]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1910 bytes, Stack size 40 bytes, stm32wlxx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_GetVoltageRange
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b1]"></a>HAL_RTCEx_AlarmBEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_hal_rtc_ex.o(.text.HAL_RTCEx_AlarmBEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>

<P><STRONG><a name="[1ab]"></a>HAL_RTCEx_BKUPRead</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wlxx_hal_rtc_ex.o(.text.HAL_RTCEx_BKUPRead))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SSRUEventCallback
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_GetTime
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_BkUp_Read_SubSeconds
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_BkUp_Read_Seconds
</UL>

<P><STRONG><a name="[1ac]"></a>HAL_RTCEx_BKUPWrite</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32wlxx_hal_rtc_ex.o(.text.HAL_RTCEx_BKUPWrite))
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SSRUEventCallback
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_BkUp_Write_SubSeconds
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_BkUp_Write_Seconds
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_Init
</UL>

<P><STRONG><a name="[31c]"></a>HAL_RTCEx_EnableBypassShadow</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32wlxx_hal_rtc_ex.o(.text.HAL_RTCEx_EnableBypassShadow))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_Init
</UL>

<P><STRONG><a name="[1aa]"></a>HAL_RTCEx_SSRUEventCallback</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, timer_if.o(.text.HAL_RTCEx_SSRUEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTCEx_SSRUEventCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPRead
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SSRUIRQHandler
</UL>

<P><STRONG><a name="[1ad]"></a>HAL_RTCEx_SSRUIRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32wlxx_hal_rtc_ex.o(.text.HAL_RTCEx_SSRUIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTCEx_SSRUIRQHandler &rArr; HAL_RTCEx_SSRUEventCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SSRUEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TAMP_STAMP_LSECSS_SSRU_IRQHandler
</UL>

<P><STRONG><a name="[25e]"></a>HAL_RTCEx_SetSSRU_IT</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, stm32wlxx_hal_rtc_ex.o(.text.HAL_RTCEx_SetSSRU_IT))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[1ae]"></a>HAL_RTC_AlarmAEventCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer_if.o(.text.HAL_RTC_AlarmAEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RTC_AlarmAEventCallback &rArr; UTIL_TIMER_IRQ_Handler &rArr; UTIL_TIMER_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_IRQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>

<P><STRONG><a name="[1b0]"></a>HAL_RTC_AlarmIRQHandler</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32wlxx_hal_rtc.o(.text.HAL_RTC_AlarmIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RTC_AlarmIRQHandler &rArr; HAL_RTC_AlarmAEventCallback &rArr; UTIL_TIMER_IRQ_Handler &rArr; UTIL_TIMER_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmAEventCallback
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_AlarmBEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_IRQHandler
</UL>

<P><STRONG><a name="[31b]"></a>HAL_RTC_DeactivateAlarm</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, stm32wlxx_hal_rtc.o(.text.HAL_RTC_DeactivateAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_DeactivateAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_StopTimer
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_StartTimer
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_Init
</UL>

<P><STRONG><a name="[1b2]"></a>HAL_RTC_Init</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, stm32wlxx_hal_rtc.o(.text.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[1b3]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 130 bytes, Stack size 72 bytes, rtc.o(.text.HAL_RTC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = HAL_RTC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[25f]"></a>HAL_RTC_SetAlarm_IT</STRONG> (Thumb, 518 bytes, Stack size 32 bytes, stm32wlxx_hal_rtc.o(.text.HAL_RTC_SetAlarm_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RTC_SetAlarm_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_StartTimer
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[267]"></a>HAL_ResumeTick</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wlxx_hal.o(.text.HAL_ResumeTick))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_ExitStopMode
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_ExitSleepMode
</UL>

<P><STRONG><a name="[1c3]"></a>HAL_SUBGHZ_CADStatusCallback</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, radio_driver.o(.text.HAL_SUBGHZ_CADStatusCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_IRQHandler
</UL>

<P><STRONG><a name="[1c2]"></a>HAL_SUBGHZ_CRCErrorCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, radio_driver.o(.text.HAL_SUBGHZ_CRCErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_IRQHandler
</UL>

<P><STRONG><a name="[1b8]"></a>HAL_SUBGHZ_ExecGetCmd</STRONG> (Thumb, 860 bytes, Stack size 32 bytes, stm32wlxx_hal_subghz.o(.text.HAL_SUBGHZ_ExecGetCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_SUBGHZ_ExecGetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_IRQHandler
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetPacketStatus
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetPayload
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetRssiInst
</UL>

<P><STRONG><a name="[1b9]"></a>HAL_SUBGHZ_ExecSetCmd</STRONG> (Thumb, 712 bytes, Stack size 36 bytes, stm32wlxx_hal_subghz.o(.text.HAL_SUBGHZ_ExecSetCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_IRQHandler
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTx
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTxInfinitePreamble
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRxDutyCycle
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRxBoosted
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTxContinuousWave
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetCad
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SendPayload
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetLoRaSymbNumTimeout
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetRandom
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRx
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketParams
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetModulationParams
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetStopRxTimerOnPreambleDetect
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetStandby
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRfFrequency
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketType
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSleep
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetDioIrqParams
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTxParams
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetBufferBaseAddress
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRegulatorMode
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_Init
</UL>

<P><STRONG><a name="[1c1]"></a>HAL_SUBGHZ_HeaderErrorCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, radio_driver.o(.text.HAL_SUBGHZ_HeaderErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_IRQHandler
</UL>

<P><STRONG><a name="[1c0]"></a>HAL_SUBGHZ_HeaderValidCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, radio_driver.o(.text.HAL_SUBGHZ_HeaderValidCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_IRQHandler
</UL>

<P><STRONG><a name="[1b7]"></a>HAL_SUBGHZ_IRQHandler</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, stm32wlxx_hal_subghz.o(.text.HAL_SUBGHZ_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_SUBGHZ_IRQHandler &rArr; HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecGetCmd
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_LrFhssHopCallback
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_HeaderValidCallback
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_SyncWordValidCallback
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_PreambleDetectedCallback
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_HeaderErrorCallback
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_RxTxTimeoutCallback
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_CADStatusCallback
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_CRCErrorCallback
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_RxCpltCallback
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGHZ_Radio_IRQHandler
</UL>

<P><STRONG><a name="[1c4]"></a>HAL_SUBGHZ_Init</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, stm32wlxx_hal_subghz.o(.text.HAL_SUBGHZ_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_SUBGHZ_Init &rArr; HAL_SUBGHZ_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SUBGHZ_Init
</UL>

<P><STRONG><a name="[1bb]"></a>HAL_SUBGHZ_LrFhssHopCallback</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, radio_driver.o(.text.HAL_SUBGHZ_LrFhssHopCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_IRQHandler
</UL>

<P><STRONG><a name="[1c5]"></a>HAL_SUBGHZ_MspInit</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, subghz.o(.text.HAL_SUBGHZ_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SUBGHZ_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_Init
</UL>

<P><STRONG><a name="[1be]"></a>HAL_SUBGHZ_PreambleDetectedCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, radio_driver.o(.text.HAL_SUBGHZ_PreambleDetectedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_IRQHandler
</UL>

<P><STRONG><a name="[30d]"></a>HAL_SUBGHZ_ReadBuffer</STRONG> (Thumb, 1028 bytes, Stack size 32 bytes, stm32wlxx_hal_subghz.o(.text.HAL_SUBGHZ_ReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_SUBGHZ_ReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetPayload
</UL>

<P><STRONG><a name="[30b]"></a>HAL_SUBGHZ_ReadRegisters</STRONG> (Thumb, 1196 bytes, Stack size 32 bytes, stm32wlxx_hal_subghz.o(.text.HAL_SUBGHZ_ReadRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_SUBGHZ_ReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetCFO
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetPayload
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadRegisters
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadRegister
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetRandom
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSwitch
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetWhiteningSeed
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSleep
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTxParams
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_Init
</UL>

<P><STRONG><a name="[1bd]"></a>HAL_SUBGHZ_RxCpltCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, radio_driver.o(.text.HAL_SUBGHZ_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_IRQHandler
</UL>

<P><STRONG><a name="[1ba]"></a>HAL_SUBGHZ_RxTxTimeoutCallback</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, radio_driver.o(.text.HAL_SUBGHZ_RxTxTimeoutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_IRQHandler
</UL>

<P><STRONG><a name="[1bf]"></a>HAL_SUBGHZ_SyncWordValidCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, radio_driver.o(.text.HAL_SUBGHZ_SyncWordValidCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_IRQHandler
</UL>

<P><STRONG><a name="[1bc]"></a>HAL_SUBGHZ_TxCpltCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, radio_driver.o(.text.HAL_SUBGHZ_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_IRQHandler
</UL>

<P><STRONG><a name="[30f]"></a>HAL_SUBGHZ_WriteBuffer</STRONG> (Thumb, 852 bytes, Stack size 32 bytes, stm32wlxx_hal_subghz.o(.text.HAL_SUBGHZ_WriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_SUBGHZ_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SendPayload
</UL>

<P><STRONG><a name="[30e]"></a>HAL_SUBGHZ_WriteRegisters</STRONG> (Thumb, 1038 bytes, Stack size 32 bytes, stm32wlxx_hal_subghz.o(.text.HAL_SUBGHZ_WriteRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_SUBGHZ_WriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetCrcPolynomial
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRxBoosted
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegisters
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetLoRaSymbNumTimeout
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetRandom
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSwitch
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetWhiteningSeed
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSyncWord
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketParams
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetModulationParams
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketType
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSleep
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTxParams
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_Init
</UL>

<P><STRONG><a name="[265]"></a>HAL_SuspendTick</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32wlxx_hal.o(.text.HAL_SuspendTick))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterStopMode
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterSleepMode
</UL>

<P><STRONG><a name="[258]"></a>HAL_UARTEx_EnableFifoMode</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, stm32wlxx_hal_uart_ex.o(.text.HAL_UARTEx_EnableFifoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UARTEx_EnableFifoMode
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init
</UL>

<P><STRONG><a name="[32a]"></a>HAL_UARTEx_EnableStopMode</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32wlxx_hal_uart_ex.o(.text.HAL_UARTEx_EnableStopMode))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_ReceiveInit
</UL>

<P><STRONG><a name="[1cc]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_hal_uart.o(.text.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
</UL>

<P><STRONG><a name="[1d0]"></a>HAL_UARTEx_RxFifoFullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_hal_uart_ex.o(.text.HAL_UARTEx_RxFifoFullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[257]"></a>HAL_UARTEx_SetRxFifoThreshold</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, stm32wlxx_hal_uart_ex.o(.text.HAL_UARTEx_SetRxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UARTEx_SetRxFifoThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init
</UL>

<P><STRONG><a name="[256]"></a>HAL_UARTEx_SetTxFifoThreshold</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, stm32wlxx_hal_uart_ex.o(.text.HAL_UARTEx_SetTxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UARTEx_SetTxFifoThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init
</UL>

<P><STRONG><a name="[1c6]"></a>HAL_UARTEx_StopModeWakeUpSourceConfig</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, stm32wlxx_hal_uart_ex.o(.text.HAL_UARTEx_StopModeWakeUpSourceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_UARTEx_StopModeWakeUpSourceConfig &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_ReceiveInit
</UL>

<P><STRONG><a name="[1cd]"></a>HAL_UARTEx_TxFifoEmptyCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_hal_uart_ex.o(.text.HAL_UARTEx_TxFifoEmptyCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1c9]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_hal_uart_ex.o(.text.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1ce]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_hal_uart.o(.text.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
</UL>

<P><STRONG><a name="[1c8]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 1578 bytes, Stack size 16 bytes, stm32wlxx_hal_uart.o(.text.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxFifoFullCallback
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_TxFifoEmptyCallback
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPUART1_IRQHandler
</UL>

<P><STRONG><a name="[1d1]"></a>HAL_UART_Init</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, stm32wlxx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init
</UL>

<P><STRONG><a name="[1d5]"></a>HAL_UART_MspDeInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, usart.o(.text.HAL_UART_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_DeInit
</UL>

<P><STRONG><a name="[1d2]"></a>HAL_UART_MspInit</STRONG> (Thumb, 238 bytes, Stack size 96 bytes, usart.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_ConfigChannelAttributes
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1db]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, stm32wlxx_hal_uart.o(.text.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_ReceiveInit
</UL>

<P><STRONG><a name="[1dd]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, usart_if.o(.text.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
</UL>

<P><STRONG><a name="[1de]"></a>HAL_UART_Transmit_DMA</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, stm32wlxx_hal_uart.o(.text.HAL_UART_Transmit_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Trace_DMA
</UL>

<P><STRONG><a name="[1ca]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usart_if.o(.text.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATransmitCplt
</UL>

<P><STRONG><a name="[322]"></a>HAL_UART_TxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_hal_uart.o(.text.HAL_UART_TxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMATxHalfCplt
</UL>

<P><STRONG><a name="[1b]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wlxx_it.o(.text.LPUART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPUART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1ed]"></a>LmHandlerConfigure</STRONG> (Thumb, 506 bytes, Stack size 112 bytes, lmhandler.o(.text.LmHandlerConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = LmHandlerConfigure &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraInfo_GetPtr
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacTestSetDutyCycleOn
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacStart
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacIsStopped
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementPrintKeys
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementInitMcuID
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetActiveRegion
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaWAN_Init
</UL>

<P><STRONG><a name="[71]"></a>LmHandlerDeviceTimeReq</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, lmhandler.o(.text.LmHandlerDeviceTimeReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = LmHandlerDeviceTimeReq &rArr; LoRaMacMlmeRequest &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhandler.o(.text.LmHandlerInit)
</UL>
<P><STRONG><a name="[153]"></a>LmHandlerGetActiveRegion</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lmhandler.o(.text.LmHandlerGetActiveRegion))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Region_get
</UL>

<P><STRONG><a name="[131]"></a>LmHandlerGetAdrEnable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lmhandler.o(.text.LmHandlerGetAdrEnable))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ADR_get
</UL>

<P><STRONG><a name="[14a]"></a>LmHandlerGetAppEUI</STRONG> (Thumb, 46 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerGetAppEUI))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = LmHandlerGetAppEUI &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_JoinEUI_get
</UL>

<P><STRONG><a name="[142]"></a>LmHandlerGetBeaconState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lmhandler.o(.text.LmHandlerGetBeaconState))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DeviceClass_get
</UL>

<P><STRONG><a name="[141]"></a>LmHandlerGetCurrentClass</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerGetCurrentClass))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = LmHandlerGetCurrentClass &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DeviceClass_get
</UL>

<P><STRONG><a name="[13c]"></a>LmHandlerGetDevAddr</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerGetDevAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = LmHandlerGetDevAddr &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DevAddr_get
</UL>

<P><STRONG><a name="[13e]"></a>LmHandlerGetDevEUI</STRONG> (Thumb, 46 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerGetDevEUI))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = LmHandlerGetDevEUI &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DevEUI_get
</UL>

<P><STRONG><a name="[144]"></a>LmHandlerGetDutyCycleEnable</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lmhandler.o(.text.LmHandlerGetDutyCycleEnable))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DutyCycle_get
</UL>

<P><STRONG><a name="[146]"></a>LmHandlerGetJoinRx1Delay</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerGetJoinRx1Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = LmHandlerGetJoinRx1Delay &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_JoinAcceptDelay1_get
</UL>

<P><STRONG><a name="[148]"></a>LmHandlerGetJoinRx2Delay</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerGetJoinRx2Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = LmHandlerGetJoinRx2Delay &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_JoinAcceptDelay2_get
</UL>

<P><STRONG><a name="[134]"></a>LmHandlerGetKey</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lmhandler.o(.text.LmHandlerGetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LmHandlerGetKey &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementGetKeyByID
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_AppSKey_get
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_NwkSKey_get
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_AppKey_get
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_NwkKey_get
</UL>

<P><STRONG><a name="[14f]"></a>LmHandlerGetNetworkID</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerGetNetworkID))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = LmHandlerGetNetworkID &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_NetworkID_get
</UL>

<P><STRONG><a name="[151]"></a>LmHandlerGetPingPeriodicity</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lmhandler.o(.text.LmHandlerGetPingPeriodicity))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_PingSlot_get
</UL>

<P><STRONG><a name="[157]"></a>LmHandlerGetRX2Params</STRONG> (Thumb, 66 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerGetRX2Params))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = LmHandlerGetRX2Params &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx2Frequency_set
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx2Frequency_get
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx2DataRate_set
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx2DataRate_get
</UL>

<P><STRONG><a name="[155]"></a>LmHandlerGetRx1Delay</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerGetRx1Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = LmHandlerGetRx1Delay &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx1Delay_get
</UL>

<P><STRONG><a name="[159]"></a>LmHandlerGetRx2Delay</STRONG> (Thumb, 60 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerGetRx2Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = LmHandlerGetRx2Delay &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx2Delay_get
</UL>

<P><STRONG><a name="[13a]"></a>LmHandlerGetTxDatarate</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerGetTxDatarate))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = LmHandlerGetTxDatarate &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DataRate_get
</UL>

<P><STRONG><a name="[15d]"></a>LmHandlerGetTxPower</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerGetTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = LmHandlerGetTxPower &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TransmitPower_get
</UL>

<P><STRONG><a name="[172]"></a>LmHandlerGetVersion</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lmhandler.o(.text.LmHandlerGetVersion))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_version_get
</UL>

<P><STRONG><a name="[1f8]"></a>LmHandlerInit</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, lmhandler.o(.text.LmHandlerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LmHandlerInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpPackagesRegistrationInit
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpCompliancePackageFactory
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaWAN_Init
</UL>

<P><STRONG><a name="[6f]"></a>LmHandlerJoin</STRONG> (Thumb, 244 bytes, Stack size 80 bytes, lmhandler.o(.text.LmHandlerJoin))
<BR><BR>[Stack]<UL><LI>Max Depth = 896 + Unknown Stack Size
<LI>Call Chain = LmHandlerJoin &rArr; LoRaMacMlmeRequest &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerRequestClass
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacStart
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Certif
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSend
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Join
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhandler.o(.text.LmHandlerInit)
</UL>
<P><STRONG><a name="[15c]"></a>LmHandlerJoinStatus</STRONG> (Thumb, 38 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerJoinStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = LmHandlerJoinStatus &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CertifSend
</UL>

<P><STRONG><a name="[14c]"></a>LmHandlerLinkCheckReq</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, lmhandler.o(.text.LmHandlerLinkCheckReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = LmHandlerLinkCheckReq &rArr; LoRaMacMlmeRequest &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Link_Check
</UL>

<P><STRONG><a name="[167]"></a>LmHandlerNvmDataStore</STRONG> (Thumb, 134 bytes, Stack size 56 bytes, lmhandler.o(.text.LmHandlerNvmDataStore))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = LmHandlerNvmDataStore &rArr; LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHalt
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmDataMgmtStoreEnd
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmDataMgmtStoreBegin
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_store_context
</UL>

<P><STRONG><a name="[7d]"></a>LmHandlerProcess</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, lmhandler.o(.text.LmHandlerProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088 + Unknown Stack Size
<LI>Call Chain = LmHandlerProcess &rArr; LoRaMacProcess &rArr; LoRaMacCryptoUnsecureMessage &rArr; SecureElementVerifyAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.text.LoRaWAN_Init)
</UL>
<P><STRONG><a name="[143]"></a>LmHandlerRequestClass</STRONG> (Thumb, 200 bytes, Stack size 56 bytes, lmhandler.o(.text.LmHandlerRequestClass))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = LmHandlerRequestClass &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacIsBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DeviceClass_set
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoin
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeConfirm
</UL>

<P><STRONG><a name="[70]"></a>LmHandlerSend</STRONG> (Thumb, 314 bytes, Stack size 72 bytes, lmhandler.o(.text.LmHandlerSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = LmHandlerSend &rArr; LmHandlerJoin &rArr; LoRaMacMlmeRequest &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoin
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacIsStopped
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacIsBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CertifSend
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhandler.o(.text.LmHandlerInit)
</UL>
<P><STRONG><a name="[154]"></a>LmHandlerSetActiveRegion</STRONG> (Thumb, 58 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerSetActiveRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = LmHandlerSetActiveRegion &rArr; LmHandlerConfigure &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerConfigure
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Region_set
</UL>

<P><STRONG><a name="[133]"></a>LmHandlerSetAdrEnable</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerSetAdrEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = LmHandlerSetAdrEnable &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ADR_set
</UL>

<P><STRONG><a name="[14b]"></a>LmHandlerSetAppEUI</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerSetAppEUI))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = LmHandlerSetAppEUI &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_JoinEUI_set
</UL>

<P><STRONG><a name="[13d]"></a>LmHandlerSetDevAddr</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerSetDevAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = LmHandlerSetDevAddr &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DevAddr_set
</UL>

<P><STRONG><a name="[13f]"></a>LmHandlerSetDevEUI</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerSetDevEUI))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = LmHandlerSetDevEUI &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DevEUI_set
</UL>

<P><STRONG><a name="[145]"></a>LmHandlerSetDutyCycleEnable</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lmhandler.o(.text.LmHandlerSetDutyCycleEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LmHandlerSetDutyCycleEnable &rArr; LoRaMacTestSetDutyCycleOn &rArr; RegionVerify &rArr; RegionUS915Verify
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacTestSetDutyCycleOn
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DutyCycle_set
</UL>

<P><STRONG><a name="[147]"></a>LmHandlerSetJoinRx1Delay</STRONG> (Thumb, 30 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerSetJoinRx1Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = LmHandlerSetJoinRx1Delay &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_JoinAcceptDelay1_set
</UL>

<P><STRONG><a name="[149]"></a>LmHandlerSetJoinRx2Delay</STRONG> (Thumb, 30 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerSetJoinRx2Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = LmHandlerSetJoinRx2Delay &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_JoinAcceptDelay2_set
</UL>

<P><STRONG><a name="[136]"></a>LmHandlerSetKey</STRONG> (Thumb, 76 bytes, Stack size 56 bytes, lmhandler.o(.text.LmHandlerSetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = LmHandlerSetKey &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_AppSKey_set
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_NwkSKey_set
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_AppKey_set
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_NwkKey_set
</UL>

<P><STRONG><a name="[150]"></a>LmHandlerSetNetworkID</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerSetNetworkID))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = LmHandlerSetNetworkID &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_NetworkID_set
</UL>

<P><STRONG><a name="[152]"></a>LmHandlerSetPingPeriodicity</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lmhandler.o(.text.LmHandlerSetPingPeriodicity))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_PingSlot_set
</UL>

<P><STRONG><a name="[158]"></a>LmHandlerSetRX2Params</STRONG> (Thumb, 38 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerSetRX2Params))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = LmHandlerSetRX2Params &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx2Frequency_set
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx2DataRate_set
</UL>

<P><STRONG><a name="[156]"></a>LmHandlerSetRx1Delay</STRONG> (Thumb, 30 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerSetRx1Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = LmHandlerSetRx1Delay &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx1Delay_set
</UL>

<P><STRONG><a name="[15a]"></a>LmHandlerSetRx2Delay</STRONG> (Thumb, 30 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerSetRx2Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = LmHandlerSetRx2Delay &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx2Delay_set
</UL>

<P><STRONG><a name="[13b]"></a>LmHandlerSetTxDatarate</STRONG> (Thumb, 64 bytes, Stack size 56 bytes, lmhandler.o(.text.LmHandlerSetTxDatarate))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = LmHandlerSetTxDatarate &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DataRate_set
</UL>

<P><STRONG><a name="[15e]"></a>LmHandlerSetTxPower</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, lmhandler.o(.text.LmHandlerSetTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = LmHandlerSetTxPower &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TransmitPower_set
</UL>

<P><STRONG><a name="[1f9]"></a>LmhpCompliancePackageFactory</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lmhpcompliance.o(.text.LmhpCompliancePackageFactory))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerInit
</UL>

<P><STRONG><a name="[1fa]"></a>LmhpPackagesRegistrationInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lmhppackagesregistration.o(.text.LmhpPackagesRegistrationInit))
<BR><BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerInit
</UL>

<P><STRONG><a name="[205]"></a>LoRaMacAdrCalcNext</STRONG> (Thumb, 252 bytes, Stack size 56 bytes, loramacadr.o(.text.LoRaMacAdrCalcNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = LoRaMacAdrCalcNext &rArr; RegionInitDefaults &rArr; RegionEU868InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
</UL>

<P><STRONG><a name="[272]"></a>LoRaMacClassBBeaconFreqReq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBBeaconFreqReq))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[1e3]"></a>LoRaMacClassBBeaconTimerEvent</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBBeaconTimerEvent))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
</UL>

<P><STRONG><a name="[275]"></a>LoRaMacClassBBeaconTimingAns</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBBeaconTimingAns))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[278]"></a>LoRaMacClassBDeviceTimeAns</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBDeviceTimeAns))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[21e]"></a>LoRaMacClassBHaltBeaconing</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBHaltBeaconing))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHalt
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[30a]"></a>LoRaMacClassBInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBInit))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMacParameters
</UL>

<P><STRONG><a name="[23d]"></a>LoRaMacClassBIsAcquisitionInProgress</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBIsAcquisitionInProgress))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[1e1]"></a>LoRaMacClassBIsBeaconExpected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBIsBeaconExpected))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
</UL>

<P><STRONG><a name="[311]"></a>LoRaMacClassBIsBeaconModeActive</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBIsBeaconModeActive))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[1e7]"></a>LoRaMacClassBIsMulticastExpected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBIsMulticastExpected))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
</UL>

<P><STRONG><a name="[1e4]"></a>LoRaMacClassBIsPingExpected</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBIsPingExpected))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
</UL>

<P><STRONG><a name="[312]"></a>LoRaMacClassBIsUplinkCollision</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBIsUplinkCollision))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[22f]"></a>LoRaMacClassBMibGetRequestConfirm</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBMibGetRequestConfirm))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>

<P><STRONG><a name="[1e9]"></a>LoRaMacClassBMulticastSlotTimerEvent</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBMulticastSlotTimerEvent))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
</UL>

<P><STRONG><a name="[26c]"></a>LoRaMacClassBPingSlotChannelReq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBPingSlotChannelReq))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[26d]"></a>LoRaMacClassBPingSlotInfoAns</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBPingSlotInfoAns))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[1e6]"></a>LoRaMacClassBPingSlotTimerEvent</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBPingSlotTimerEvent))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
</UL>

<P><STRONG><a name="[242]"></a>LoRaMacClassBProcess</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBProcess))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[24a]"></a>LoRaMacClassBResumeBeaconing</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBResumeBeaconing))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[248]"></a>LoRaMacClassBRxBeacon</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBRxBeacon))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[1e2]"></a>LoRaMacClassBSetBeaconState</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBSetBeaconState))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
</UL>

<P><STRONG><a name="[1e8]"></a>LoRaMacClassBSetMulticastSlotState</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBSetMulticastSlotState))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
</UL>

<P><STRONG><a name="[23e]"></a>LoRaMacClassBSetPingSlotInfo</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBSetPingSlotInfo))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[1e5]"></a>LoRaMacClassBSetPingSlotState</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBSetPingSlotState))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
</UL>

<P><STRONG><a name="[313]"></a>LoRaMacClassBStopRxSlots</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBStopRxSlots))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[314]"></a>LoRaMacClassBSwitchClass</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacClassBSwitchClass))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReJoinReq
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchClass
</UL>

<P><STRONG><a name="[206]"></a>LoRaMacCommandsAddCmd</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, loramaccommands.o(.text.LoRaMacCommandsAddCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LoRaMacCommandsAddCmd &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[240]"></a>LoRaMacCommandsGetCmd</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, loramaccommands.o(.text.LoRaMacCommandsGetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[26b]"></a>LoRaMacCommandsGetCmdSize</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, loramaccommands.o(.text.LoRaMacCommandsGetCmdSize))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[229]"></a>LoRaMacCommandsGetSizeSerializedCmds</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, loramaccommands.o(.text.LoRaMacCommandsGetSizeSerializedCmds))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[207]"></a>LoRaMacCommandsInit</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, loramaccommands.o(.text.LoRaMacCommandsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LoRaMacCommandsInit &rArr; memset1 &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[208]"></a>LoRaMacCommandsRemoveNoneStickyCmds</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, loramaccommands.o(.text.LoRaMacCommandsRemoveNoneStickyCmds))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LoRaMacCommandsRemoveNoneStickyCmds &rArr; memset1 &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>

<P><STRONG><a name="[209]"></a>LoRaMacCommandsRemoveStickyAnsCmds</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, loramaccommands.o(.text.LoRaMacCommandsRemoveStickyAnsCmds))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LoRaMacCommandsRemoveStickyAnsCmds &rArr; memset1 &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[20a]"></a>LoRaMacCommandsSerializeCmds</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, loramaccommands.o(.text.LoRaMacCommandsSerializeCmds))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LoRaMacCommandsSerializeCmds &rArr; memset1 &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
</UL>

<P><STRONG><a name="[241]"></a>LoRaMacConfirmQueueAdd</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, loramacconfirmqueue.o(.text.LoRaMacConfirmQueueAdd))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[23a]"></a>LoRaMacConfirmQueueGetCnt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, loramacconfirmqueue.o(.text.LoRaMacConfirmQueueGetCnt))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[244]"></a>LoRaMacConfirmQueueGetStatus</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, loramacconfirmqueue.o(.text.LoRaMacConfirmQueueGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaMacConfirmQueueGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[20b]"></a>LoRaMacConfirmQueueHandleCb</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, loramacconfirmqueue.o(.text.LoRaMacConfirmQueueHandleCb))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LoRaMacConfirmQueueHandleCb &rArr; memset1 &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[20c]"></a>LoRaMacConfirmQueueInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, loramacconfirmqueue.o(.text.LoRaMacConfirmQueueInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LoRaMacConfirmQueueInit &rArr; memset1 &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[243]"></a>LoRaMacConfirmQueueIsCmdActive</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, loramacconfirmqueue.o(.text.LoRaMacConfirmQueueIsCmdActive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaMacConfirmQueueIsCmdActive
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[239]"></a>LoRaMacConfirmQueueIsFull</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, loramacconfirmqueue.o(.text.LoRaMacConfirmQueueIsFull))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[24d]"></a>LoRaMacConfirmQueueSetStatus</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, loramacconfirmqueue.o(.text.LoRaMacConfirmQueueSetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoRaMacConfirmQueueSetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[1ea]"></a>LoRaMacConfirmQueueSetStatusCmn</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, loramacconfirmqueue.o(.text.LoRaMacConfirmQueueSetStatusCmn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaMacConfirmQueueSetStatusCmn
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
</UL>

<P><STRONG><a name="[193]"></a>LoRaMacCryptoGetFCntDown</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, loramaccrypto.o(.text.LoRaMacCryptoGetFCntDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaMacCryptoGetFCntDown
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFCntDown
</UL>

<P><STRONG><a name="[228]"></a>LoRaMacCryptoGetFCntUp</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, loramaccrypto.o(.text.LoRaMacCryptoGetFCntUp))
<BR><BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[20d]"></a>LoRaMacCryptoHandleJoinAccept</STRONG> (Thumb, 316 bytes, Stack size 96 bytes, loramaccrypto.o(.text.LoRaMacCryptoHandleJoinAccept))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = LoRaMacCryptoHandleJoinAccept &rArr; SecureElementProcessJoinAccept &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementProcessJoinAccept
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementDeriveAndStoreKey
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacParserJoinAccept
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveSessionKey10x
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[210]"></a>LoRaMacCryptoInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, loramaccrypto.o(.text.LoRaMacCryptoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LoRaMacCryptoInit &rArr; memset1 &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[211]"></a>LoRaMacCryptoPrepareJoinRequest</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, loramaccrypto.o(.text.LoRaMacCryptoPrepareJoinRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = LoRaMacCryptoPrepareJoinRequest &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSerializerJoinRequest
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementRandomNumber
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementComputeAesCmac
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[215]"></a>LoRaMacCryptoSecureMessage</STRONG> (Thumb, 512 bytes, Stack size 88 bytes, loramaccrypto.o(.text.LoRaMacCryptoSecureMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSerializerData
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementComputeAesCmac
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[218]"></a>LoRaMacCryptoSetKey</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, loramaccrypto.o(.text.LoRaMacCryptoSetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = LoRaMacCryptoSetKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementDeriveAndStoreKey
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[231]"></a>LoRaMacCryptoSetLrWanVersion</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, loramaccrypto.o(.text.LoRaMacCryptoSetLrWanVersion))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[225]"></a>LoRaMacCryptoSetMulticastReference</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, loramaccrypto.o(.text.LoRaMacCryptoSetMulticastReference))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[219]"></a>LoRaMacCryptoUnsecureMessage</STRONG> (Thumb, 346 bytes, Stack size 328 bytes, loramaccrypto.o(.text.LoRaMacCryptoUnsecureMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = LoRaMacCryptoUnsecureMessage &rArr; SecureElementVerifyAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacParserData
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementVerifyAesCmac
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFCntDown
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PayloadEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[1fb]"></a>LoRaMacHalt</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, loramac.o(.text.LoRaMacHalt))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LoRaMacHalt &rArr; LoRaMacHandleNvm &rArr; Crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBHaltBeaconing
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleNvm
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerNvmDataStore
</UL>

<P><STRONG><a name="[1ee]"></a>LoRaMacInitialization</STRONG> (Thumb, 918 bytes, Stack size 72 bytes, loramac.o(.text.LoRaMacInitialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = LoRaMacInitialization &rArr; ResetMacParameters &rArr; RegionInitDefaults &rArr; RegionEU868InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Create
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand1
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSetMulticastReference
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsInit
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoInit
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueInit
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGetMcuTime
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMacParameters
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionIsActive
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerConfigure
</UL>

<P><STRONG><a name="[1ff]"></a>LoRaMacIsBusy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, loramac.o(.text.LoRaMacIsBusy))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerRequestClass
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSend
</UL>

<P><STRONG><a name="[1f4]"></a>LoRaMacIsStopped</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, loramac.o(.text.LoRaMacIsStopped))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSend
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerConfigure
</UL>

<P><STRONG><a name="[201]"></a>LoRaMacMcpsRequest</STRONG> (Thumb, 910 bytes, Stack size 120 bytes, loramac.o(.text.LoRaMacMcpsRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = LoRaMacMcpsRequest &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveNoneStickyCmds
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsSerializeCmds
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoGetFCntUp
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsGetSizeSerializedCmds
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacAdrCalcNext
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSend
</UL>

<P><STRONG><a name="[232]"></a>LoRaMacMibClassBSetRequestConfirm</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, loramacclassb.o(.text.LoRaMacMibClassBSetRequestConfirm))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[1f0]"></a>LoRaMacMibGetRequestConfirm</STRONG> (Thumb, 1006 bytes, Stack size 16 bytes, loramac.o(.text.LoRaMacMibGetRequestConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = LoRaMacMibGetRequestConfirm &rArr; RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBMibGetRequestConfirm
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetVersion
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementGetJoinEui
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementGetDevAddr
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementGetDevEui
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetTxPower
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetRX2Params
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetRx2Delay
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetRx1Delay
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetJoinRx2Delay
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetJoinRx1Delay
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerRequestClass
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetCurrentClass
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetActiveRegion
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetTxDatarate
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoinStatus
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSend
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetNetworkID
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetNetworkID
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetDevEUI
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetDevEUI
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetDevAddr
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetDevAddr
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetKey
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetAppEUI
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetAppEUI
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerNvmDataStore
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerConfigure
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeConfirm
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication
</UL>

<P><STRONG><a name="[1ef]"></a>LoRaMacMibSetRequestConfirm</STRONG> (Thumb, 1470 bytes, Stack size 32 bytes, loramac.o(.text.LoRaMacMibSetRequestConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSetKey
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibClassBSetRequestConfirm
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSetLrWanVersion
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreNvmData
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchClass
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenContinuousRxCWindow
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionChanMaskSet
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetJoinEui
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetDevAddr
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetDevEui
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetTxPower
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetRX2Params
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetRx2Delay
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetRx1Delay
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetJoinRx2Delay
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetJoinRx1Delay
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerRequestClass
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetTxDatarate
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetAdrEnable
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoin
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetNetworkID
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetDevEUI
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetDevAddr
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetKey
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetAppEUI
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerConfigure
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceOnMcpsIndication
</UL>

<P><STRONG><a name="[1f6]"></a>LoRaMacMlmeRequest</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, loramac.o(.text.LoRaMacMlmeRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = LoRaMacMlmeRequest &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueAdd
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsAddCmd
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsGetCmd
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetPingSlotInfo
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBBeaconTimerEvent
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetBeaconState
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsAcquisitionInProgress
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueIsFull
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueGetCnt
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxContinuousWave
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReJoinReq
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMacParameters
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerLinkCheckReq
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoin
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceOnMcpsIndication
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerDeviceTimeReq
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeConfirm
</UL>

<P><STRONG><a name="[21a]"></a>LoRaMacParserData</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, loramacparser.o(.text.LoRaMacParserData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoRaMacParserData &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[20f]"></a>LoRaMacParserJoinAccept</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, loramacparser.o(.text.LoRaMacParserJoinAccept))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LoRaMacParserJoinAccept &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
</UL>

<P><STRONG><a name="[1fe]"></a>LoRaMacProcess</STRONG> (Thumb, 2842 bytes, Stack size 136 bytes, loramac.o(.text.LoRaMacProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = LoRaMacProcess &rArr; LoRaMacCryptoUnsecureMessage &rArr; SecureElementVerifyAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_SetPeriod
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveStickyAnsCmds
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueSetStatus
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBResumeBeaconing
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueGetCnt
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueHandleCb
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueSetStatusCmn
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacParserData
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBMulticastSlotTimerEvent
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetMulticastSlotState
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsMulticastExpected
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBPingSlotTimerEvent
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetPingSlotState
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsPingExpected
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBRxBeacon
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGetMcuTime
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueGetStatus
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueIsCmdActive
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBProcess
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareRxDoneAbort
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFCntDown
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHandleNvm
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckTimeoutRetriesProcess
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckTimeoutRetriesFinalize
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSub
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_GetCurrentTime
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyCFList
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetBandTxDone
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementGetJoinEui
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetDevAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerProcess
</UL>

<P><STRONG><a name="[200]"></a>LoRaMacQueryTxPossible</STRONG> (Thumb, 232 bytes, Stack size 56 bytes, loramac.o(.text.LoRaMacQueryTxPossible))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = LoRaMacQueryTxPossible &rArr; LoRaMacAdrCalcNext &rArr; RegionInitDefaults &rArr; RegionEU868InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsGetSizeSerializedCmds
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacAdrCalcNext
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSend
</UL>

<P><STRONG><a name="[217]"></a>LoRaMacSerializerData</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, loramacserializer.o(.text.LoRaMacSerializerData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LoRaMacSerializerData &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSecureMessage
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[213]"></a>LoRaMacSerializerJoinRequest</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, loramacserializer.o(.text.LoRaMacSerializerJoinRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LoRaMacSerializerJoinRequest &rArr; memcpyr
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpyr
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoPrepareJoinRequest
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[1f5]"></a>LoRaMacStart</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, loramac.o(.text.LoRaMacStart))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoin
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerConfigure
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmDataMgmtStoreEnd
</UL>

<P><STRONG><a name="[263]"></a>LoRaMacStop</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, loramac.o(.text.LoRaMacStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LoRaMacStop
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NvmDataMgmtStoreBegin
</UL>

<P><STRONG><a name="[1f3]"></a>LoRaMacTestSetDutyCycleOn</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, loramac.o(.text.LoRaMacTestSetDutyCycleOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LoRaMacTestSetDutyCycleOn &rArr; RegionVerify &rArr; RegionUS915Verify
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetDutyCycleEnable
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerConfigure
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceOnMcpsIndication
</UL>

<P><STRONG><a name="[251]"></a>LoRaWAN_Init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, lora_app.o(.text.LoRaWAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = LoRaWAN_Init &rArr; LmHandlerConfigure &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerConfigure
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerInit
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoraInfo_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_RegTask
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LoRaWAN_Init
</UL>

<P><STRONG><a name="[140]"></a>LoraInfo_GetPtr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lora_info.o(.text.LoraInfo_GetPtr))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DeviceClass_set
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DeviceClass_get
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerConfigure
</UL>

<P><STRONG><a name="[252]"></a>LoraInfo_Init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lora_info.o(.text.LoraInfo_Init))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaWAN_Init
</UL>

<P><STRONG><a name="[120]"></a>MX_ADC_Init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, adc.o(.text.MX_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MX_ADC_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadChannels
</UL>

<P><STRONG><a name="[253]"></a>MX_DMA_Init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, dma.o(.text.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Init
</UL>

<P><STRONG><a name="[254]"></a>MX_GPIO_Init</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, gpio.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[255]"></a>MX_LPUART1_UART_Init</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, usart.o(.text.MX_LPUART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = MX_LPUART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_EnableFifoMode
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Init
</UL>

<P><STRONG><a name="[259]"></a>MX_LoRaWAN_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, app_lorawan.o(.text.MX_LoRaWAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = MX_LoRaWAN_Init &rArr; LoRaWAN_Init &rArr; LmHandlerConfigure &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaWAN_Init
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25b]"></a>MX_LoRaWAN_Process</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_lorawan.o(.text.MX_LoRaWAN_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_LoRaWAN_Process &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25d]"></a>MX_RTC_Init</STRONG> (Thumb, 136 bytes, Stack size 56 bytes, rtc.o(.text.MX_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = MX_RTC_Init &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetSSRU_IT
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_IF_Init
</UL>

<P><STRONG><a name="[260]"></a>MX_SUBGHZ_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, subghz.o(.text.MX_SUBGHZ_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_SUBGHZ_Init &rArr; HAL_SUBGHZ_Init &rArr; HAL_SUBGHZ_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_Init
</UL>

<P><STRONG><a name="[1c]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_it.o(.text.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>NvmDataMgmtEvent</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nvmdatamgmt.o(.text.NvmDataMgmtEvent))
<BR>[Address Reference Count : 1]<UL><LI> lmhandler.o(.text.LmHandlerInit)
</UL>
<P><STRONG><a name="[1fc]"></a>NvmDataMgmtStoreBegin</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, nvmdatamgmt.o(.text.NvmDataMgmtStoreBegin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NvmDataMgmtStoreBegin &rArr; LoRaMacStop
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacStop
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerNvmDataStore
</UL>

<P><STRONG><a name="[1fd]"></a>NvmDataMgmtStoreEnd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nvmdatamgmt.o(.text.NvmDataMgmtStoreEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NvmDataMgmtStoreEnd
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacStart
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerNvmDataStore
</UL>

<P><STRONG><a name="[84]"></a>OnRxDone</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, test_rf.o(.text.OnRxDone))
<BR><BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetEvt
</UL>
<BR>[Address Reference Count : 2]<UL><LI> test_rf.o(.text.TST_TX_Start)
<LI> test_rf.o(.text.TST_RX_Start)
</UL>
<P><STRONG><a name="[87]"></a>OnRxError</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, test_rf.o(.text.OnRxError))
<BR><BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetEvt
</UL>
<BR>[Address Reference Count : 2]<UL><LI> test_rf.o(.text.TST_TX_Start)
<LI> test_rf.o(.text.TST_RX_Start)
</UL>
<P><STRONG><a name="[86]"></a>OnRxTimeout</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, test_rf.o(.text.OnRxTimeout))
<BR><BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetEvt
</UL>
<BR>[Address Reference Count : 2]<UL><LI> test_rf.o(.text.TST_TX_Start)
<LI> test_rf.o(.text.TST_RX_Start)
</UL>
<P><STRONG><a name="[83]"></a>OnTxDone</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, test_rf.o(.text.OnTxDone))
<BR><BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetEvt
</UL>
<BR>[Address Reference Count : 2]<UL><LI> test_rf.o(.text.TST_TX_Start)
<LI> test_rf.o(.text.TST_RX_Start)
</UL>
<P><STRONG><a name="[85]"></a>OnTxTimeout</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, test_rf.o(.text.OnTxTimeout))
<BR><BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetEvt
</UL>
<BR>[Address Reference Count : 2]<UL><LI> test_rf.o(.text.TST_TX_Start)
<LI> test_rf.o(.text.TST_RX_Start)
</UL>
<P><STRONG><a name="[f3]"></a>PWR_EnterOffMode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_lpm_if.o(.text.PWR_EnterOffMode))
<BR>[Address Reference Count : 1]<UL><LI> stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
</UL>
<P><STRONG><a name="[ef]"></a>PWR_EnterSleepMode</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32_lpm_if.o(.text.PWR_EnterSleepMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PWR_EnterSleepMode &rArr; HAL_PWR_EnterSLEEPMode
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSLEEPMode
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SuspendTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
</UL>
<P><STRONG><a name="[f1]"></a>PWR_EnterStopMode</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32_lpm_if.o(.text.PWR_EnterStopMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWR_EnterStopMode
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnterSTOP2Mode
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SuspendTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
</UL>
<P><STRONG><a name="[f4]"></a>PWR_ExitOffMode</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_lpm_if.o(.text.PWR_ExitOffMode))
<BR>[Address Reference Count : 1]<UL><LI> stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
</UL>
<P><STRONG><a name="[f0]"></a>PWR_ExitSleepMode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32_lpm_if.o(.text.PWR_ExitSleepMode))
<BR><BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ResumeTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
</UL>
<P><STRONG><a name="[f2]"></a>PWR_ExitStopMode</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32_lpm_if.o(.text.PWR_ExitStopMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PWR_ExitStopMode &rArr; vcom_Resume &rArr; HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_Resume
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ResumeTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_lpm_if.o(.rodata.UTIL_PowerDriver)
</UL>
<P><STRONG><a name="[21]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[279]"></a>RBI_ConfigRFSwitch</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio_board_if.o(.text.RBI_ConfigRFSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RBI_ConfigRFSwitch &rArr; BSP_RADIO_ConfigRFSwitch
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RADIO_ConfigRFSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSwitch
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSleep
</UL>

<P><STRONG><a name="[27a]"></a>RBI_GetRFOMaxPowerConfig</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio_board_if.o(.text.RBI_GetRFOMaxPowerConfig))
<BR><BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RADIO_GetRFOMaxPowerConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTxParams
</UL>

<P><STRONG><a name="[27c]"></a>RBI_GetTxConfig</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio_board_if.o(.text.RBI_GetTxConfig))
<BR><BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RADIO_GetTxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRfTxPower
</UL>

<P><STRONG><a name="[27e]"></a>RBI_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio_board_if.o(.text.RBI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = RBI_Init &rArr; BSP_RADIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RADIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_Init
</UL>

<P><STRONG><a name="[27f]"></a>RBI_IsDCDC</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio_board_if.o(.text.RBI_IsDCDC))
<BR><BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RADIO_IsDCDC
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSwitch
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSleep
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRegulatorMode
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_Init
</UL>

<P><STRONG><a name="[281]"></a>RBI_IsTCXO</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio_board_if.o(.text.RBI_IsTCXO))
<BR><BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RADIO_IsTCXO
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_Init
</UL>

<P><STRONG><a name="[298]"></a>RFW_DeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, radio_fw.o(.text.RFW_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxGenericConfig
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxGenericConfig
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>

<P><STRONG><a name="[28d]"></a>RFW_DeInit_TxLongPacket</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, radio_fw.o(.text.RFW_DeInit_TxLongPacket))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
</UL>

<P><STRONG><a name="[2aa]"></a>RFW_Init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, radio_fw.o(.text.RFW_Init))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxGenericConfig
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxGenericConfig
</UL>

<P><STRONG><a name="[28e]"></a>RFW_Is_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio_fw.o(.text.RFW_Is_Init))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxBoosted
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRx
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>

<P><STRONG><a name="[28c]"></a>RFW_Is_LongPacketModeEnabled</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio_fw.o(.text.RFW_Is_LongPacketModeEnabled))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
</UL>

<P><STRONG><a name="[29f]"></a>RFW_ReceiveInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, radio_fw.o(.text.RFW_ReceiveInit))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxBoosted
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRx
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>

<P><STRONG><a name="[ec]"></a>RFW_ReceiveLongPacket</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, radio_fw.o(.text.RFW_ReceiveLongPacket))
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[28f]"></a>RFW_ReceivePayload</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, radio_fw.o(.text.RFW_ReceivePayload))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
</UL>

<P><STRONG><a name="[2ad]"></a>RFW_SetAntSwitch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, radio_fw.o(.text.RFW_SetAntSwitch))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxGenericConfig
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
</UL>

<P><STRONG><a name="[295]"></a>RFW_SetRadioModem</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, radio_fw.o(.text.RFW_SetRadioModem))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxGenericConfig
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxGenericConfig
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
</UL>

<P><STRONG><a name="[2a6]"></a>RFW_TransmitInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, radio_fw.o(.text.RFW_TransmitInit))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
</UL>

<P><STRONG><a name="[eb]"></a>RFW_TransmitLongPacket</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, radio_fw.o(.text.RFW_TransmitLongPacket))
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[4d]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wlxx_it.o(.text.RTC_Alarm_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RTC_Alarm_IRQHandler &rArr; HAL_RTC_AlarmIRQHandler &rArr; HAL_RTC_AlarmAEventCallback &rArr; UTIL_TIMER_IRQ_Handler &rArr; UTIL_TIMER_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[1b4]"></a>RTC_ExitInitMode</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, stm32wlxx_hal_rtc.o(.text.RTC_ExitInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_ExitInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[2d4]"></a>RegionAS923AlternateDr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, regionas923.o(.text.RegionAS923AlternateDr))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
</UL>

<P><STRONG><a name="[2b3]"></a>RegionAS923ApplyCFList</STRONG> (Thumb, 686 bytes, Stack size 40 bytes, regionas923.o(.text.RegionAS923ApplyCFList))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RegionAS923ApplyCFList &rArr; RegionAS923ChannelAdd &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanDisable
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ChannelAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyCFList
</UL>

<P><STRONG><a name="[2da]"></a>RegionAS923ApplyDrOffset</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, regionas923.o(.text.RegionAS923ApplyDrOffset))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyDrOffset
</UL>

<P><STRONG><a name="[2b6]"></a>RegionAS923ChanMaskSet</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, regionas923.o(.text.RegionAS923ChanMaskSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionAS923ChanMaskSet &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionChanMaskSet
</UL>

<P><STRONG><a name="[2b4]"></a>RegionAS923ChannelAdd</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, regionas923.o(.text.RegionAS923ChannelAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionAS923ChannelAdd &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923NewChannelReq
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ApplyCFList
</UL>

<P><STRONG><a name="[2b9]"></a>RegionAS923ComputeRxWindowParameters</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, regionas923.o(.text.RegionAS923ComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionAS923ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeFsk
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonGetBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
</UL>

<P><STRONG><a name="[2e9]"></a>RegionAS923DlChannelReq</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, regionas923.o(.text.RegionAS923DlChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionAS923DlChannelReq
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDlChannelReq
</UL>

<P><STRONG><a name="[2be]"></a>RegionAS923GetPhyParam</STRONG> (Thumb, 550 bytes, Stack size 24 bytes, regionas923.o(.text.RegionAS923GetPhyParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = RegionAS923GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonGetNextLowerTxDr
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonGetBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923LinkAdrReq
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>

<P><STRONG><a name="[2c1]"></a>RegionAS923InitDefaults</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, regionas923.o(.text.RegionAS923InitDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RegionAS923InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
</UL>

<P><STRONG><a name="[2c2]"></a>RegionAS923LinkAdrReq</STRONG> (Thumb, 870 bytes, Stack size 96 bytes, regionas923.o(.text.RegionAS923LinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = RegionAS923LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonParseLinkAdrReq
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923GetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionLinkAdrReq
</UL>

<P><STRONG><a name="[2c5]"></a>RegionAS923NewChannelReq</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, regionas923.o(.text.RegionAS923NewChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RegionAS923NewChannelReq &rArr; RegionAS923ChannelAdd &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanDisable
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ChannelAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNewChannelReq
</UL>

<P><STRONG><a name="[2c6]"></a>RegionAS923NextChannel</STRONG> (Thumb, 338 bytes, Stack size 136 bytes, regionas923.o(.text.RegionAS923NextChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = RegionAS923NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UTIL_TIMER_GetElapsedTime
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonIdentifyChannels
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonGetBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNextChannel
</UL>

<P><STRONG><a name="[2c9]"></a>RegionAS923RxConfig</STRONG> (Thumb, 292 bytes, Stack size 88 bytes, regionas923.o(.text.RegionAS923RxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = RegionAS923RxConfig &rArr; RegionCommonRxConfigPrint &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonRxConfigPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>

<P><STRONG><a name="[2cb]"></a>RegionAS923RxParamSetupReq</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, regionas923.o(.text.RegionAS923RxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionAS923RxParamSetupReq
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxParamSetupReq
</UL>

<P><STRONG><a name="[2cc]"></a>RegionAS923SetBandTxDone</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, regionas923.o(.text.RegionAS923SetBandTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionAS923SetBandTxDone &rArr; RegionCommonSetBandTxDone
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonSetBandTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetBandTxDone
</UL>

<P><STRONG><a name="[2ce]"></a>RegionAS923SetContinuousWave</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, regionas923.o(.text.RegionAS923SetContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RegionAS923SetContinuousWave &rArr; RegionCommonComputeTxPower &rArr; floorf &rArr; __aeabi_fadd
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLimitTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetContinuousWave
</UL>

<P><STRONG><a name="[2d1]"></a>RegionAS923TxConfig</STRONG> (Thumb, 380 bytes, Stack size 80 bytes, regionas923.o(.text.RegionAS923TxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = RegionAS923TxConfig &rArr; RegionCommonTxConfigPrint &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonTxConfigPrint
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLimitTxPower
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonGetBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxConfig
</UL>

<P><STRONG><a name="[305]"></a>RegionAS923TxParamSetupReq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, regionas923.o(.text.RegionAS923TxParamSetupReq))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxParamSetupReq
</UL>

<P><STRONG><a name="[2d3]"></a>RegionAS923Verify</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, regionas923.o(.text.RegionAS923Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionAS923Verify
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
</UL>

<P><STRONG><a name="[23b]"></a>RegionAlternateDr</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, region.o(.text.RegionAlternateDr))
<BR><BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915AlternateDr
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868AlternateDr
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923AlternateDr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[249]"></a>RegionApplyCFList</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, region.o(.text.RegionApplyCFList))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RegionApplyCFList &rArr; RegionEU868ApplyCFList &rArr; RegionEU868ChannelAdd &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915ApplyCFList
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ApplyCFList
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ApplyCFList
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[2d9]"></a>RegionApplyDrOffset</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, region.o(.text.RegionApplyDrOffset))
<BR><BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915ApplyDrOffset
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ApplyDrOffset
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ApplyDrOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[308]"></a>RegionBaseUSCalcDownlinkFrequency</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, regionbaseus.o(.text.RegionBaseUSCalcDownlinkFrequency))
<BR><BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915GetPhyParam
</UL>

<P><STRONG><a name="[2dd]"></a>RegionBaseUSComputeNext125kHzJoinChannel</STRONG> (Thumb, 260 bytes, Stack size 48 bytes, regionbaseus.o(.text.RegionBaseUSComputeNext125kHzJoinChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RegionBaseUSComputeNext125kHzJoinChannel &rArr; randr
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915NextChannel
</UL>

<P><STRONG><a name="[233]"></a>RegionChanMaskSet</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, region.o(.text.RegionChanMaskSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RegionChanMaskSet &rArr; RegionUS915ChanMaskSet &rArr; RegionCommonCountChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915ChanMaskSet
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChanMaskSet
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ChanMaskSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[2b5]"></a>RegionCommonChanDisable</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, regioncommon.o(.text.RegionCommonChanDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionCommonChanDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915NextChannel
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NewChannelReq
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923NewChannelReq
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ApplyCFList
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ApplyCFList
</UL>

<P><STRONG><a name="[2b7]"></a>RegionCommonChanMaskCopy</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, regioncommon.o(.text.RegionCommonChanMaskCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915NextChannel
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915LinkAdrReq
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915ChanMaskSet
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChanMaskSet
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ChanMaskSet
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915InitDefaults
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868InitDefaults
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923InitDefaults
</UL>

<P><STRONG><a name="[2e3]"></a>RegionCommonChanVerifyDr</STRONG> (Thumb, 462 bytes, Stack size 20 bytes, regioncommon.o(.text.RegionCommonChanVerifyDr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RegionCommonChanVerifyDr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonGetNextLowerTxDr
</UL>

<P><STRONG><a name="[2bd]"></a>RegionCommonComputeRxWindowParameters</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, regioncommon.o(.text.RegionCommonComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionCommonComputeRxWindowParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915ComputeRxWindowParameters
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ComputeRxWindowParameters
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[2bb]"></a>RegionCommonComputeSymbolTimeFsk</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, regioncommon.o(.text.RegionCommonComputeSymbolTimeFsk))
<BR><BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ComputeRxWindowParameters
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[2bc]"></a>RegionCommonComputeSymbolTimeLoRa</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, regioncommon.o(.text.RegionCommonComputeSymbolTimeLoRa))
<BR><BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915ComputeRxWindowParameters
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ComputeRxWindowParameters
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[2d0]"></a>RegionCommonComputeTxPower</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, regioncommon.o(.text.RegionCommonComputeTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RegionCommonComputeTxPower &rArr; floorf &rArr; __aeabi_fadd
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floorf
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915SetContinuousWave
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868SetContinuousWave
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923SetContinuousWave
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915TxConfig
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868TxConfig
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923TxConfig
</UL>

<P><STRONG><a name="[2c7]"></a>RegionCommonCountChannels</STRONG> (Thumb, 376 bytes, Stack size 20 bytes, regioncommon.o(.text.RegionCommonCountChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RegionCommonCountChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915SetContinuousWave
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915NextChannel
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NextChannel
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923NextChannel
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915LinkAdrReq
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915TxConfig
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915ChanMaskSet
</UL>

<P><STRONG><a name="[2ba]"></a>RegionCommonGetBandwidth</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, regioncommon.o(.text.RegionCommonGetBandwidth))
<BR><BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915NextChannel
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NextChannel
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923NextChannel
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915TxConfig
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868TxConfig
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923TxConfig
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915ComputeRxWindowParameters
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ComputeRxWindowParameters
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ComputeRxWindowParameters
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915GetPhyParam
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868GetPhyParam
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923GetPhyParam
</UL>

<P><STRONG><a name="[2bf]"></a>RegionCommonGetNextLowerTxDr</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, regioncommon.o(.text.RegionCommonGetNextLowerTxDr))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanVerifyDr
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915GetPhyParam
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868GetPhyParam
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923GetPhyParam
</UL>

<P><STRONG><a name="[2c8]"></a>RegionCommonIdentifyChannels</STRONG> (Thumb, 456 bytes, Stack size 64 bytes, regioncommon.o(.text.RegionCommonIdentifyChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UTIL_TIMER_GetElapsedTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_GetElapsedTime
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915NextChannel
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NextChannel
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923NextChannel
</UL>

<P><STRONG><a name="[2cf]"></a>RegionCommonLimitTxPower</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, regioncommon.o(.text.RegionCommonLimitTxPower))
<BR><BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915SetContinuousWave
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868SetContinuousWave
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923SetContinuousWave
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915TxConfig
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868TxConfig
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923TxConfig
</UL>

<P><STRONG><a name="[2c4]"></a>RegionCommonLinkAdrReqVerifyParams</STRONG> (Thumb, 208 bytes, Stack size 64 bytes, regioncommon.o(.text.RegionCommonLinkAdrReqVerifyParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanVerifyDr
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915LinkAdrReq
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868LinkAdrReq
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923LinkAdrReq
</UL>

<P><STRONG><a name="[2c3]"></a>RegionCommonParseLinkAdrReq</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, regioncommon.o(.text.RegionCommonParseLinkAdrReq))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915LinkAdrReq
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868LinkAdrReq
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923LinkAdrReq
</UL>

<P><STRONG><a name="[2ca]"></a>RegionCommonRxConfigPrint</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, regioncommon.o(.text.RegionCommonRxConfigPrint))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = RegionCommonRxConfigPrint &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915RxConfig
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868RxConfig
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923RxConfig
</UL>

<P><STRONG><a name="[2cd]"></a>RegionCommonSetBandTxDone</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, regioncommon.o(.text.RegionCommonSetBandTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionCommonSetBandTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915SetBandTxDone
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868SetBandTxDone
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923SetBandTxDone
</UL>

<P><STRONG><a name="[2d2]"></a>RegionCommonTxConfigPrint</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, regioncommon.o(.text.RegionCommonTxConfigPrint))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = RegionCommonTxConfigPrint &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915TxConfig
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868TxConfig
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923TxConfig
</UL>

<P><STRONG><a name="[2e4]"></a>RegionCommonUpdateBandTimeOff</STRONG> (Thumb, 564 bytes, Stack size 88 bytes, regioncommon.o(.text.RegionCommonUpdateBandTimeOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RegionCommonUpdateBandTimeOff &rArr; UTIL_TIMER_GetElapsedTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_GetElapsedTime
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSub
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeFromMs
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeToMs
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_GetCurrentTime
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonIdentifyChannels
</UL>

<P><STRONG><a name="[2b8]"></a>RegionCommonValueInRange</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, regioncommon.o(.text.RegionCommonValueInRange))
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChannelAdd
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ChannelAdd
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915RxParamSetupReq
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868RxParamSetupReq
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923RxParamSetupReq
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915Verify
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868Verify
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923Verify
</UL>

<P><STRONG><a name="[24b]"></a>RegionComputeRxWindowParameters</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, region.o(.text.RegionComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionComputeRxWindowParameters &rArr; RegionUS915ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915ComputeRxWindowParameters
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ComputeRxWindowParameters
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ComputeRxWindowParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchClass
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenContinuousRxCWindow
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[273]"></a>RegionDlChannelReq</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, region.o(.text.RegionDlChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionDlChannelReq &rArr; RegionEU868DlChannelReq
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915DlChannelReq
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868DlChannelReq
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923DlChannelReq
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[2d5]"></a>RegionEU868AlternateDr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, regioneu868.o(.text.RegionEU868AlternateDr))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
</UL>

<P><STRONG><a name="[2d7]"></a>RegionEU868ApplyCFList</STRONG> (Thumb, 660 bytes, Stack size 40 bytes, regioneu868.o(.text.RegionEU868ApplyCFList))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RegionEU868ApplyCFList &rArr; RegionEU868ChannelAdd &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanDisable
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChannelAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyCFList
</UL>

<P><STRONG><a name="[2db]"></a>RegionEU868ApplyDrOffset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, regioneu868.o(.text.RegionEU868ApplyDrOffset))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyDrOffset
</UL>

<P><STRONG><a name="[2de]"></a>RegionEU868ChanMaskSet</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, regioneu868.o(.text.RegionEU868ChanMaskSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionEU868ChanMaskSet &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionChanMaskSet
</UL>

<P><STRONG><a name="[2ec]"></a>RegionEU868ChannelAdd</STRONG> (Thumb, 410 bytes, Stack size 24 bytes, regioneu868.o(.text.RegionEU868ChannelAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RegionEU868ChannelAdd &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NewChannelReq
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ApplyCFList
</UL>

<P><STRONG><a name="[2e7]"></a>RegionEU868ComputeRxWindowParameters</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, regioneu868.o(.text.RegionEU868ComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionEU868ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeFsk
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonGetBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
</UL>

<P><STRONG><a name="[2ea]"></a>RegionEU868DlChannelReq</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, regioneu868.o(.text.RegionEU868DlChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionEU868DlChannelReq
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDlChannelReq
</UL>

<P><STRONG><a name="[2ed]"></a>RegionEU868GetPhyParam</STRONG> (Thumb, 414 bytes, Stack size 24 bytes, regioneu868.o(.text.RegionEU868GetPhyParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = RegionEU868GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonGetNextLowerTxDr
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonGetBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868LinkAdrReq
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>

<P><STRONG><a name="[2ee]"></a>RegionEU868InitDefaults</STRONG> (Thumb, 236 bytes, Stack size 152 bytes, regioneu868.o(.text.RegionEU868InitDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = RegionEU868InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
</UL>

<P><STRONG><a name="[2ef]"></a>RegionEU868LinkAdrReq</STRONG> (Thumb, 870 bytes, Stack size 96 bytes, regioneu868.o(.text.RegionEU868LinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = RegionEU868LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonParseLinkAdrReq
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868GetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionLinkAdrReq
</UL>

<P><STRONG><a name="[2f0]"></a>RegionEU868NewChannelReq</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, regioneu868.o(.text.RegionEU868NewChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RegionEU868NewChannelReq &rArr; RegionEU868ChannelAdd &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanDisable
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChannelAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNewChannelReq
</UL>

<P><STRONG><a name="[2f1]"></a>RegionEU868NextChannel</STRONG> (Thumb, 338 bytes, Stack size 136 bytes, regioneu868.o(.text.RegionEU868NextChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = RegionEU868NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UTIL_TIMER_GetElapsedTime
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonIdentifyChannels
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonGetBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNextChannel
</UL>

<P><STRONG><a name="[2f2]"></a>RegionEU868RxConfig</STRONG> (Thumb, 292 bytes, Stack size 88 bytes, regioneu868.o(.text.RegionEU868RxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = RegionEU868RxConfig &rArr; RegionCommonRxConfigPrint &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonRxConfigPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>

<P><STRONG><a name="[2f3]"></a>RegionEU868RxParamSetupReq</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, regioneu868.o(.text.RegionEU868RxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RegionEU868RxParamSetupReq
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxParamSetupReq
</UL>

<P><STRONG><a name="[2f4]"></a>RegionEU868SetBandTxDone</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, regioneu868.o(.text.RegionEU868SetBandTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionEU868SetBandTxDone &rArr; RegionCommonSetBandTxDone
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonSetBandTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetBandTxDone
</UL>

<P><STRONG><a name="[2f5]"></a>RegionEU868SetContinuousWave</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, regioneu868.o(.text.RegionEU868SetContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RegionEU868SetContinuousWave &rArr; RegionCommonComputeTxPower &rArr; floorf &rArr; __aeabi_fadd
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLimitTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetContinuousWave
</UL>

<P><STRONG><a name="[2f6]"></a>RegionEU868TxConfig</STRONG> (Thumb, 380 bytes, Stack size 80 bytes, regioneu868.o(.text.RegionEU868TxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = RegionEU868TxConfig &rArr; RegionCommonTxConfigPrint &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonTxConfigPrint
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLimitTxPower
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonGetBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxConfig
</UL>

<P><STRONG><a name="[306]"></a>RegionEU868TxParamSetupReq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, regioneu868.o(.text.RegionEU868TxParamSetupReq))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxParamSetupReq
</UL>

<P><STRONG><a name="[2f7]"></a>RegionEU868Verify</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, regioneu868.o(.text.RegionEU868Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionEU868Verify
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
</UL>

<P><STRONG><a name="[176]"></a>RegionGetPhyParam</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, region.o(.text.RegionGetPhyParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915GetPhyParam
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868GetPhyParam
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923GetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerConfigure
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacAdrCalcNext
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacQueryTxPossible
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckTimeoutRetriesProcess
</UL>

<P><STRONG><a name="[22e]"></a>RegionGetVersion</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, region.o(.text.RegionGetVersion))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>

<P><STRONG><a name="[174]"></a>RegionInitDefaults</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, region.o(.text.RegionInitDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = RegionInitDefaults &rArr; RegionEU868InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915InitDefaults
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868InitDefaults
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923InitDefaults
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacAdrCalcNext
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetMacParameters
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AckTimeoutRetriesFinalize
</UL>

<P><STRONG><a name="[221]"></a>RegionIsActive</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, region.o(.text.RegionIsActive))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[271]"></a>RegionLinkAdrReq</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, region.o(.text.RegionLinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = RegionLinkAdrReq &rArr; RegionUS915LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915LinkAdrReq
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868LinkAdrReq
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923LinkAdrReq
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[270]"></a>RegionNewChannelReq</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, region.o(.text.RegionNewChannelReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RegionNewChannelReq &rArr; RegionEU868NewChannelReq &rArr; RegionEU868ChannelAdd &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915NewChannelReq
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NewChannelReq
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923NewChannelReq
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[2fc]"></a>RegionNextChannel</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, region.o(.text.RegionNextChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = RegionNextChannel &rArr; RegionUS915NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UTIL_TIMER_GetElapsedTime
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915NextChannel
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NextChannel
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923NextChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[24c]"></a>RegionRxConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, region.o(.text.RegionRxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = RegionRxConfig &rArr; RegionEU868RxConfig &rArr; RegionCommonRxConfigPrint &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915RxConfig
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868RxConfig
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923RxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SwitchClass
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow1TimerEvent
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpenContinuousRxCWindow
</UL>

<P><STRONG><a name="[274]"></a>RegionRxParamSetupReq</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, region.o(.text.RegionRxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionRxParamSetupReq &rArr; RegionUS915RxParamSetupReq
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915RxParamSetupReq
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868RxParamSetupReq
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923RxParamSetupReq
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[247]"></a>RegionSetBandTxDone</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, region.o(.text.RegionSetBandTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionSetBandTxDone &rArr; RegionUS915SetBandTxDone &rArr; RegionCommonSetBandTxDone
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915SetBandTxDone
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868SetBandTxDone
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923SetBandTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[301]"></a>RegionSetContinuousWave</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, region.o(.text.RegionSetContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RegionSetContinuousWave &rArr; RegionUS915SetContinuousWave &rArr; RegionCommonComputeTxPower &rArr; floorf &rArr; __aeabi_fadd
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915SetContinuousWave
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868SetContinuousWave
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923SetContinuousWave
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTxContinuousWave
</UL>

<P><STRONG><a name="[303]"></a>RegionTxConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, region.o(.text.RegionTxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = RegionTxConfig &rArr; RegionUS915TxConfig &rArr; RegionCommonTxConfigPrint &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915TxConfig
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868TxConfig
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923TxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[26e]"></a>RegionTxParamSetupReq</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, region.o(.text.RegionTxParamSetupReq))
<BR><BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915TxParamSetupReq
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868TxParamSetupReq
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923TxParamSetupReq
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[2d6]"></a>RegionUS915AlternateDr</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, regionus915.o(.text.RegionUS915AlternateDr))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAlternateDr
</UL>

<P><STRONG><a name="[2d8]"></a>RegionUS915ApplyCFList</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, regionus915.o(.text.RegionUS915ApplyCFList))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyCFList
</UL>

<P><STRONG><a name="[2dc]"></a>RegionUS915ApplyDrOffset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, regionus915.o(.text.RegionUS915ApplyDrOffset))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyDrOffset
</UL>

<P><STRONG><a name="[2df]"></a>RegionUS915ChanMaskSet</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, regionus915.o(.text.RegionUS915ChanMaskSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RegionUS915ChanMaskSet &rArr; RegionCommonCountChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionChanMaskSet
</UL>

<P><STRONG><a name="[2e8]"></a>RegionUS915ComputeRxWindowParameters</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, regionus915.o(.text.RegionUS915ComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegionUS915ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonGetBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
</UL>

<P><STRONG><a name="[2eb]"></a>RegionUS915DlChannelReq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, regionus915.o(.text.RegionUS915DlChannelReq))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDlChannelReq
</UL>

<P><STRONG><a name="[2f8]"></a>RegionUS915GetPhyParam</STRONG> (Thumb, 492 bytes, Stack size 24 bytes, regionus915.o(.text.RegionUS915GetPhyParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = RegionUS915GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionBaseUSCalcDownlinkFrequency
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonGetNextLowerTxDr
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonGetBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915LinkAdrReq
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>

<P><STRONG><a name="[2f9]"></a>RegionUS915InitDefaults</STRONG> (Thumb, 744 bytes, Stack size 64 bytes, regionus915.o(.text.RegionUS915InitDefaults))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RegionUS915InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
</UL>

<P><STRONG><a name="[2fa]"></a>RegionUS915LinkAdrReq</STRONG> (Thumb, 644 bytes, Stack size 112 bytes, regionus915.o(.text.RegionUS915LinkAdrReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = RegionUS915LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLinkAdrReqVerifyParams
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonParseLinkAdrReq
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915GetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionLinkAdrReq
</UL>

<P><STRONG><a name="[2fb]"></a>RegionUS915NewChannelReq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, regionus915.o(.text.RegionUS915NewChannelReq))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNewChannelReq
</UL>

<P><STRONG><a name="[2fd]"></a>RegionUS915NextChannel</STRONG> (Thumb, 454 bytes, Stack size 192 bytes, regionus915.o(.text.RegionUS915NextChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = RegionUS915NextChannel &rArr; RegionCommonIdentifyChannels &rArr; RegionCommonUpdateBandTimeOff &rArr; UTIL_TIMER_GetElapsedTime
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionBaseUSComputeNext125kHzJoinChannel
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonIdentifyChannels
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanDisable
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonChanMaskCopy
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;randr
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonGetBandwidth
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNextChannel
</UL>

<P><STRONG><a name="[2fe]"></a>RegionUS915RxConfig</STRONG> (Thumb, 202 bytes, Stack size 80 bytes, regionus915.o(.text.RegionUS915RxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = RegionUS915RxConfig &rArr; RegionCommonRxConfigPrint &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonRxConfigPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>

<P><STRONG><a name="[2ff]"></a>RegionUS915RxParamSetupReq</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, regionus915.o(.text.RegionUS915RxParamSetupReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionUS915RxParamSetupReq
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxParamSetupReq
</UL>

<P><STRONG><a name="[300]"></a>RegionUS915SetBandTxDone</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, regionus915.o(.text.RegionUS915SetBandTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RegionUS915SetBandTxDone &rArr; RegionCommonSetBandTxDone
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonSetBandTxDone
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetBandTxDone
</UL>

<P><STRONG><a name="[302]"></a>RegionUS915SetContinuousWave</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, regionus915.o(.text.RegionUS915SetContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RegionUS915SetContinuousWave &rArr; RegionCommonComputeTxPower &rArr; floorf &rArr; __aeabi_fadd
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLimitTxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetContinuousWave
</UL>

<P><STRONG><a name="[304]"></a>RegionUS915TxConfig</STRONG> (Thumb, 334 bytes, Stack size 88 bytes, regionus915.o(.text.RegionUS915TxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = RegionUS915TxConfig &rArr; RegionCommonTxConfigPrint &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonCountChannels
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonTxConfigPrint
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonLimitTxPower
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonGetBandwidth
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxConfig
</UL>

<P><STRONG><a name="[307]"></a>RegionUS915TxParamSetupReq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, regionus915.o(.text.RegionUS915TxParamSetupReq))
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxParamSetupReq
</UL>

<P><STRONG><a name="[309]"></a>RegionUS915Verify</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, regionus915.o(.text.RegionUS915Verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionUS915Verify
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonValueInRange
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionVerify
</UL>

<P><STRONG><a name="[227]"></a>RegionVerify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, region.o(.text.RegionVerify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RegionVerify &rArr; RegionUS915Verify
</UL>
<BR>[Calls]<UL><LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915Verify
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868Verify
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923Verify
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacTestSetDutyCycleOn
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[55]"></a>SUBGHZ_Radio_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wlxx_it.o(.text.SUBGHZ_Radio_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SUBGHZ_Radio_IRQHandler &rArr; HAL_SUBGHZ_IRQHandler &rArr; HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[294]"></a>SUBGRF_GetCFO</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, radio_driver.o(.text.SUBGRF_GetCFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SUBGRF_GetCFO &rArr; HAL_SUBGHZ_ReadRegisters
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
</UL>

<P><STRONG><a name="[29a]"></a>SUBGRF_GetFskBandwidthRegValue</STRONG> (Thumb, 406 bytes, Stack size 0 bytes, radio_driver.o(.text.SUBGRF_GetFskBandwidthRegValue))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxGenericConfig
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>

<P><STRONG><a name="[283]"></a>SUBGRF_GetOperatingMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, radio_driver.o(.text.SUBGRF_GetOperatingMode))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGetStatus
</UL>

<P><STRONG><a name="[293]"></a>SUBGRF_GetPacketStatus</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, radio_driver.o(.text.SUBGRF_GetPacketStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SUBGRF_GetPacketStatus &rArr; HAL_SUBGHZ_ExecGetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_set_8
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecGetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
</UL>

<P><STRONG><a name="[292]"></a>SUBGRF_GetPayload</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, radio_driver.o(.text.SUBGRF_GetPayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SUBGRF_GetPayload &rArr; HAL_SUBGHZ_ReadBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ReadBuffer
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecGetCmd
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
</UL>

<P><STRONG><a name="[284]"></a>SUBGRF_GetRadioWakeUpTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio_driver.o(.text.SUBGRF_GetRadioWakeUpTime))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGetWakeupTime
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>

<P><STRONG><a name="[2a3]"></a>SUBGRF_GetRandom</STRONG> (Thumb, 372 bytes, Stack size 48 bytes, radio_driver.o(.text.SUBGRF_GetRandom))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = SUBGRF_GetRandom &rArr; HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ReadRegisters
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_WriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRandom
</UL>

<P><STRONG><a name="[2a2]"></a>SUBGRF_GetRssiInst</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, radio_driver.o(.text.SUBGRF_GetRssiInst))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SUBGRF_GetRssiInst &rArr; HAL_SUBGHZ_ExecGetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecGetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRssi
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>

<P><STRONG><a name="[285]"></a>SUBGRF_Init</STRONG> (Thumb, 420 bytes, Stack size 32 bytes, radio_driver.o(.text.SUBGRF_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SUBGRF_Init &rArr; RBI_Init &rArr; BSP_RADIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBI_IsDCDC
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBI_IsTCXO
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBI_Init
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SUBGHZ_Init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ReadRegisters
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_WriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[291]"></a>SUBGRF_ReadRegister</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, radio_driver.o(.text.SUBGRF_ReadRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SUBGRF_ReadRegister &rArr; HAL_SUBGHZ_ReadRegisters
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxGenericConfig
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxGenericConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRead
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>

<P><STRONG><a name="[2a4]"></a>SUBGRF_ReadRegisters</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, radio_driver.o(.text.SUBGRF_ReadRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SUBGRF_ReadRegisters &rArr; HAL_SUBGHZ_ReadRegisters
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioReadRegisters
</UL>

<P><STRONG><a name="[2a7]"></a>SUBGRF_SendPayload</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, radio_driver.o(.text.SUBGRF_SendPayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SUBGRF_SendPayload &rArr; HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_WriteBuffer
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
</UL>

<P><STRONG><a name="[287]"></a>SUBGRF_SetBufferBaseAddress</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, radio_driver.o(.text.SUBGRF_SetBufferBaseAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SUBGRF_SetBufferBaseAddress &rArr; HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[2af]"></a>SUBGRF_SetCad</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, radio_driver.o(.text.SUBGRF_SetCad))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SUBGRF_SetCad &rArr; HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioStartCad
</UL>

<P><STRONG><a name="[2ab]"></a>SUBGRF_SetCrcPolynomial</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, radio_driver.o(.text.SUBGRF_SetCrcPolynomial))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SUBGRF_SetCrcPolynomial &rArr; HAL_SUBGHZ_WriteRegisters
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_WriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxGenericConfig
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxGenericConfig
</UL>

<P><STRONG><a name="[289]"></a>SUBGRF_SetDioIrqParams</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, radio_driver.o(.text.SUBGRF_SetDioIrqParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SUBGRF_SetDioIrqParams &rArr; HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxDutyCycle
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxBoosted
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioStartCad
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRx
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRandom
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[2a8]"></a>SUBGRF_SetLoRaSymbNumTimeout</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, radio_driver.o(.text.SUBGRF_SetLoRaSymbNumTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SUBGRF_SetLoRaSymbNumTimeout &rArr; HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_WriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxGenericConfig
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>

<P><STRONG><a name="[29b]"></a>SUBGRF_SetModulationParams</STRONG> (Thumb, 420 bytes, Stack size 32 bytes, radio_driver.o(.text.SUBGRF_SetModulationParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SUBGRF_SetModulationParams &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_WriteRegisters
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxGenericConfig
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxGenericConfig
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>

<P><STRONG><a name="[29c]"></a>SUBGRF_SetPacketParams</STRONG> (Thumb, 460 bytes, Stack size 32 bytes, radio_driver.o(.text.SUBGRF_SetPacketParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SUBGRF_SetPacketParams &rArr; HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_WriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxGenericConfig
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxGenericConfig
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetMaxPayloadLength
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>

<P><STRONG><a name="[296]"></a>SUBGRF_SetPacketType</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, radio_driver.o(.text.SUBGRF_SetPacketType))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SUBGRF_SetPacketType &rArr; HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_WriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxGenericConfig
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxGenericConfig
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
</UL>

<P><STRONG><a name="[286]"></a>SUBGRF_SetRegulatorMode</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, radio_driver.o(.text.SUBGRF_SetRegulatorMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SUBGRF_SetRegulatorMode &rArr; HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBI_IsDCDC
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[297]"></a>SUBGRF_SetRfFrequency</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, radio_driver.o(.text.SUBGRF_SetRfFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SUBGRF_SetRfFrequency &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxContinuousWave
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetChannel
</UL>

<P><STRONG><a name="[2ac]"></a>SUBGRF_SetRfTxPower</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, radio_driver.o(.text.SUBGRF_SetRfTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SUBGRF_SetRfTxPower &rArr; SUBGRF_SetTxParams &rArr; HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBI_GetTxConfig
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTxParams
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxGenericConfig
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxCw
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxContinuousWave
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
</UL>

<P><STRONG><a name="[2a1]"></a>SUBGRF_SetRx</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, radio_driver.o(.text.SUBGRF_SetRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SUBGRF_SetRx &rArr; HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRx
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>

<P><STRONG><a name="[2a5]"></a>SUBGRF_SetRxBoosted</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, radio_driver.o(.text.SUBGRF_SetRxBoosted))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SUBGRF_SetRxBoosted &rArr; HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_WriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxBoosted
</UL>

<P><STRONG><a name="[2a9]"></a>SUBGRF_SetRxDutyCycle</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, radio_driver.o(.text.SUBGRF_SetRxDutyCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SUBGRF_SetRxDutyCycle &rArr; HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxDutyCycle
</UL>

<P><STRONG><a name="[28a]"></a>SUBGRF_SetSleep</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, radio_driver.o(.text.SUBGRF_SetSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SUBGRF_SetSleep &rArr; HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBI_IsDCDC
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBI_ConfigRFSwitch
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ReadRegisters
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_WriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSleep
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[28b]"></a>SUBGRF_SetStandby</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, radio_driver.o(.text.SUBGRF_SetStandby))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SUBGRF_SetStandby &rArr; HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxGenericConfig
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxGenericConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioStandby
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>

<P><STRONG><a name="[299]"></a>SUBGRF_SetStopRxTimerOnPreambleDetect</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, radio_driver.o(.text.SUBGRF_SetStopRxTimerOnPreambleDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SUBGRF_SetStopRxTimerOnPreambleDetect &rArr; HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxGenericConfig
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>

<P><STRONG><a name="[2a0]"></a>SUBGRF_SetSwitch</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, radio_driver.o(.text.SUBGRF_SetSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SUBGRF_SetSwitch &rArr; HAL_SUBGHZ_ReadRegisters
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBI_IsDCDC
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBI_ConfigRFSwitch
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ReadRegisters
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_WriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxCw
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxPrbs
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxDutyCycle
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxBoosted
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxContinuousWave
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioStartCad
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRx
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>

<P><STRONG><a name="[29d]"></a>SUBGRF_SetSyncWord</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, radio_driver.o(.text.SUBGRF_SetSyncWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SUBGRF_SetSyncWord &rArr; HAL_SUBGHZ_WriteRegisters
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_WriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxGenericConfig
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxGenericConfig
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>

<P><STRONG><a name="[2b1]"></a>SUBGRF_SetTx</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, radio_driver.o(.text.SUBGRF_SetTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SUBGRF_SetTx &rArr; HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxPrbs
</UL>

<P><STRONG><a name="[2ae]"></a>SUBGRF_SetTxContinuousWave</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, radio_driver.o(.text.SUBGRF_SetTxContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SUBGRF_SetTxContinuousWave &rArr; HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxCw
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxContinuousWave
</UL>

<P><STRONG><a name="[2b0]"></a>SUBGRF_SetTxInfinitePreamble</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, radio_driver.o(.text.SUBGRF_SetTxInfinitePreamble))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SUBGRF_SetTxInfinitePreamble &rArr; HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxPrbs
</UL>

<P><STRONG><a name="[288]"></a>SUBGRF_SetTxParams</STRONG> (Thumb, 616 bytes, Stack size 24 bytes, radio_driver.o(.text.SUBGRF_SetTxParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SUBGRF_SetTxParams &rArr; HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBI_GetRFOMaxPowerConfig
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ExecSetCmd
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ReadRegisters
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_WriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRfTxPower
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[29e]"></a>SUBGRF_SetWhiteningSeed</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, radio_driver.o(.text.SUBGRF_SetWhiteningSeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SUBGRF_SetWhiteningSeed &rArr; HAL_SUBGHZ_ReadRegisters
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_ReadRegisters
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_WriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxGenericConfig
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxGenericConfig
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>

<P><STRONG><a name="[290]"></a>SUBGRF_WriteRegister</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, radio_driver.o(.text.SUBGRF_WriteRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SUBGRF_WriteRegister &rArr; HAL_SUBGHZ_WriteRegisters
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_WriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxGenericConfig
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxGenericConfig
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxCw
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxPrbs
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetPublicNetwork
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioWrite
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxContinuousWave
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
</UL>

<P><STRONG><a name="[2b2]"></a>SUBGRF_WriteRegisters</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, radio_driver.o(.text.SUBGRF_WriteRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SUBGRF_WriteRegisters &rArr; HAL_SUBGHZ_WriteRegisters
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SUBGHZ_WriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioWriteRegisters
</UL>

<P><STRONG><a name="[1f]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[15f]"></a>SYS_GetBatteryLevel</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, adc_if.o(.text.SYS_GetBatteryLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SYS_GetBatteryLevel &rArr; ADC_ReadChannels &rArr; HAL_ADCEx_Calibration_Start &rArr; ADC_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_bat_get
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBatteryLevel
</UL>

<P><STRONG><a name="[194]"></a>SYS_GetTemperatureLevel</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, adc_if.o(.text.SYS_GetTemperatureLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SYS_GetTemperatureLevel &rArr; ADC_ReadChannels &rArr; HAL_ADCEx_Calibration_Start &rArr; ADC_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTemperatureLevel
</UL>

<P><STRONG><a name="[318]"></a>SYS_InitMeasurement</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, adc_if.o(.text.SYS_InitMeasurement))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
</UL>

<P><STRONG><a name="[216]"></a>SecureElementAesEncrypt</STRONG> (Thumb, 236 bytes, Stack size 272 bytes, soft-se.o(.text.SecureElementAesEncrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = SecureElementAesEncrypt &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_aes_encrypt
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_aes_set_key
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSecureMessage
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementProcessJoinAccept
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementDeriveAndStoreKey
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetKey
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PayloadEncrypt
</UL>

<P><STRONG><a name="[214]"></a>SecureElementComputeAesCmac</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, soft-se.o(.text.SecureElementComputeAesCmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmac
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSecureMessage
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoPrepareJoinRequest
</UL>

<P><STRONG><a name="[187]"></a>SecureElementDeriveAndStoreKey</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, soft-se.o(.text.SecureElementDeriveAndStoreKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetKey
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSetKey
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeriveSessionKey10x
</UL>

<P><STRONG><a name="[22c]"></a>SecureElementGetDevAddr</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, soft-se.o(.text.SecureElementGetDevAddr))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
</UL>

<P><STRONG><a name="[22b]"></a>SecureElementGetDevEui</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, soft-se.o(.text.SecureElementGetDevEui))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SecureElementGetDevEui &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReJoinReq
</UL>

<P><STRONG><a name="[22d]"></a>SecureElementGetJoinEui</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, soft-se.o(.text.SecureElementGetJoinEui))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SecureElementGetJoinEui &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReJoinReq
</UL>

<P><STRONG><a name="[1f7]"></a>SecureElementGetKeyByID</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, soft-se.o(.text.SecureElementGetKeyByID))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetKey
</UL>

<P><STRONG><a name="[224]"></a>SecureElementInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, soft-se.o(.text.SecureElementInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SecureElementInit &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[1f1]"></a>SecureElementInitMcuID</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, soft-se.o(.text.SecureElementInitMcuID))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SecureElementInitMcuID &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerConfigure
</UL>

<P><STRONG><a name="[1f2]"></a>SecureElementPrintKeys</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, soft-se.o(.text.SecureElementPrintKeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = SecureElementPrintKeys &rArr; PrintKey &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintIds
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKey
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerConfigure
</UL>

<P><STRONG><a name="[262]"></a>SecureElementPrintSessionKeys</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, soft-se.o(.text.SecureElementPrintSessionKeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = SecureElementPrintSessionKeys &rArr; PrintKey &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintIds
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKey
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeConfirm
</UL>

<P><STRONG><a name="[20e]"></a>SecureElementProcessJoinAccept</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, soft-se.o(.text.SecureElementProcessJoinAccept))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = SecureElementProcessJoinAccept &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmac
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
</UL>

<P><STRONG><a name="[212]"></a>SecureElementRandomNumber</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, soft-se.o(.text.SecureElementRandomNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SecureElementRandomNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoPrepareJoinRequest
</UL>

<P><STRONG><a name="[236]"></a>SecureElementSetDevAddr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, soft-se.o(.text.SecureElementSetDevAddr))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MlmeConfirm
</UL>

<P><STRONG><a name="[235]"></a>SecureElementSetDevEui</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, soft-se.o(.text.SecureElementSetDevEui))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SecureElementSetDevEui &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[237]"></a>SecureElementSetJoinEui</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, soft-se.o(.text.SecureElementSetJoinEui))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SecureElementSetJoinEui &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[202]"></a>SecureElementSetKey</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, soft-se.o(.text.SecureElementSetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSetKey
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSetKey
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementDeriveAndStoreKey
</UL>

<P><STRONG><a name="[21b]"></a>SecureElementVerifyAesCmac</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, soft-se.o(.text.SecureElementVerifyAesCmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = SecureElementVerifyAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeCmac
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
</UL>

<P><STRONG><a name="[22]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_it.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[276]"></a>SysTimeAdd</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32_systime.o(.text.SysTimeAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTimeAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[2e6]"></a>SysTimeFromMs</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32_systime.o(.text.SysTimeFromMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTimeFromMs
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
</UL>

<P><STRONG><a name="[14d]"></a>SysTimeGet</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, stm32_systime.o(.text.SysTimeGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTimeGet
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_LocalTime_get
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimestampNow
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[223]"></a>SysTimeGetMcuTime</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32_systime.o(.text.SysTimeGetMcuTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTimeGetMcuTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>

<P><STRONG><a name="[14e]"></a>SysTimeLocalTime</STRONG> (Thumb, 1162 bytes, Stack size 20 bytes, stm32_systime.o(.text.SysTimeLocalTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SysTimeLocalTime
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_LocalTime_get
</UL>

<P><STRONG><a name="[277]"></a>SysTimeSet</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, stm32_systime.o(.text.SysTimeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SysTimeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
</UL>

<P><STRONG><a name="[246]"></a>SysTimeSub</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32_systime.o(.text.SysTimeSub))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTimeSub
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
</UL>

<P><STRONG><a name="[2e5]"></a>SysTimeToMs</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, stm32_systime.o(.text.SysTimeToMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTimeToMs
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
</UL>

<P><STRONG><a name="[25a]"></a>SystemApp_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, sys_app.o(.text.SystemApp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemApp_Init &rArr; UTIL_ADV_TRACE_Init &rArr; UTIL_MEM_set_8 &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_SetOffMode
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_Init
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_InitMeasurement
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_SetVerboseLevel
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_RegisterTimeStampFunction
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_Init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DBG_Init
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LoRaWAN_Init
</UL>

<P><STRONG><a name="[61]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_stm32wlxx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(.text)
</UL>
<P><STRONG><a name="[25]"></a>TAMP_STAMP_LSECSS_SSRU_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32wlxx_it.o(.text.TAMP_STAMP_LSECSS_SSRU_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TAMP_STAMP_LSECSS_SSRU_IRQHandler &rArr; HAL_RTCEx_SSRUIRQHandler &rArr; HAL_RTCEx_SSRUEventCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SSRUIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[f6]"></a>TIMER_IF_BkUp_Read_Seconds</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer_if.o(.text.TIMER_IF_BkUp_Read_Seconds))
<BR><BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.rodata.UTIL_SYSTIMDriver)
</UL>
<P><STRONG><a name="[f8]"></a>TIMER_IF_BkUp_Read_SubSeconds</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer_if.o(.text.TIMER_IF_BkUp_Read_SubSeconds))
<BR><BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.rodata.UTIL_SYSTIMDriver)
</UL>
<P><STRONG><a name="[f5]"></a>TIMER_IF_BkUp_Write_Seconds</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer_if.o(.text.TIMER_IF_BkUp_Write_Seconds))
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.rodata.UTIL_SYSTIMDriver)
</UL>
<P><STRONG><a name="[f7]"></a>TIMER_IF_BkUp_Write_SubSeconds</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer_if.o(.text.TIMER_IF_BkUp_Write_SubSeconds))
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.rodata.UTIL_SYSTIMDriver)
</UL>
<P><STRONG><a name="[103]"></a>TIMER_IF_Convert_Tick2ms</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer_if.o(.text.TIMER_IF_Convert_Tick2ms))
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[102]"></a>TIMER_IF_Convert_ms2Tick</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timer_if.o(.text.TIMER_IF_Convert_ms2Tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIMER_IF_Convert_ms2Tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[199]"></a>TIMER_IF_DelayMs</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, timer_if.o(.text.TIMER_IF_DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIMER_IF_DelayMs &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>

<P><STRONG><a name="[101]"></a>TIMER_IF_GetMinimumTimeout</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer_if.o(.text.TIMER_IF_GetMinimumTimeout))
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[f9]"></a>TIMER_IF_GetTime</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, timer_if.o(.text.TIMER_IF_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER_IF_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.rodata.UTIL_SYSTIMDriver)
</UL>
<P><STRONG><a name="[fe]"></a>TIMER_IF_GetTimerContext</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer_if.o(.text.TIMER_IF_GetTimerContext))
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[ff]"></a>TIMER_IF_GetTimerElapsedTime</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, timer_if.o(.text.TIMER_IF_GetTimerElapsedTime))
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[100]"></a>TIMER_IF_GetTimerValue</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, timer_if.o(.text.TIMER_IF_GetTimerValue))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[fa]"></a>TIMER_IF_Init</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, timer_if.o(.text.TIMER_IF_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = TIMER_IF_Init &rArr; MX_RTC_Init &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_BKUPWrite
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_EnableBypassShadow
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[fd]"></a>TIMER_IF_SetTimerContext</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, timer_if.o(.text.TIMER_IF_SetTimerContext))
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[fb]"></a>TIMER_IF_StartTimer</STRONG> (Thumb, 110 bytes, Stack size 64 bytes, timer_if.o(.text.TIMER_IF_StartTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = TIMER_IF_StartTimer &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[fc]"></a>TIMER_IF_StopTimer</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, timer_if.o(.text.TIMER_IF_StopTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER_IF_StopTimer &rArr; HAL_RTC_DeactivateAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_if.o(.rodata.UTIL_TimerDriver)
</UL>
<P><STRONG><a name="[169]"></a>TST_RX_Start</STRONG> (Thumb, 624 bytes, Stack size 144 bytes, test_rf.o(.text.TST_RX_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = TST_RX_Start &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_WaitEvt
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_rx
</UL>

<P><STRONG><a name="[16a]"></a>TST_RxRssi</STRONG> (Thumb, 248 bytes, Stack size 112 bytes, test_rf.o(.text.TST_RxRssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = TST_RxRssi &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_rxRssi
</UL>

<P><STRONG><a name="[16e]"></a>TST_TX_Start</STRONG> (Thumb, 780 bytes, Stack size 88 bytes, test_rf.o(.text.TST_TX_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = TST_TX_Start &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_WaitEvt
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_set_8
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_tx_hopping
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_tx
</UL>

<P><STRONG><a name="[16f]"></a>TST_TxTone</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, test_rf.o(.text.TST_TxTone))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = TST_TxTone &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_txTone
</UL>

<P><STRONG><a name="[168]"></a>TST_get_config</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, test_rf.o(.text.TST_get_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TST_get_config &rArr; UTIL_MEM_cpy_8
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_cpy_8
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_tx_hopping
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_set_config
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_get_config
</UL>

<P><STRONG><a name="[16c]"></a>TST_set_config</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, test_rf.o(.text.TST_set_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TST_set_config &rArr; UTIL_MEM_cpy_8
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_cpy_8
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_tx_hopping
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_set_config
</UL>

<P><STRONG><a name="[16d]"></a>TST_stop</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, test_rf.o(.text.TST_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TST_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_stop
</UL>

<P><STRONG><a name="[1d3]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 230 bytes, Stack size 0 bytes, stm32wlxx_hal_uart.o(.text.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1d4]"></a>UART_SetConfig</STRONG> (Thumb, 584 bytes, Stack size 16 bytes, stm32wlxx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1dc]"></a>UART_Start_Receive_IT</STRONG> (Thumb, 610 bytes, Stack size 0 bytes, stm32wlxx_hal_uart.o(.text.UART_Start_Receive_IT))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>

<P><STRONG><a name="[1c7]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 514 bytes, Stack size 24 bytes, stm32wlxx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_StopModeWakeUpSourceConfig
</UL>

<P><STRONG><a name="[132]"></a>UTIL_ADV_TRACE_COND_FSend</STRONG> (Thumb, 576 bytes, Stack size 56 bytes, stm32_adv_trace.o(.text.UTIL_ADV_TRACE_COND_FSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_vsnprintf_like
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACE_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_bat_get
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_stop
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_tx_hopping
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_RX_Start
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_rx
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_TX_Start
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_tx
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_get_config
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_RxRssi
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_TxTone
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_PingSlot_get
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TransmitPower_get
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx2Frequency_get
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx2DataRate_get
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx2Delay_get
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx1Delay_get
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_JoinAcceptDelay2_get
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_JoinAcceptDelay1_get
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DutyCycle_get
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DeviceClass_get
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Region_get
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DataRate_get
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_ADR_get
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_NetworkID_get
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DevEUI_get
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DevAddr_get
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_AppSKey_get
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_NwkSKey_get
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_AppKey_get
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_NwkKey_get
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_JoinEUI_get
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_store_context
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_LocalTime_get
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_verbose_set
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_verbose_get
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_version_get
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_event_OnNvmDataChange
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerConfigure
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Process
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintIds
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintKey
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxTimeout
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxTimeout
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonTxConfigPrint
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonRxConfigPrint
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
</UL>

<P><STRONG><a name="[170]"></a>UTIL_ADV_TRACE_GetVerboseLevel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32_adv_trace.o(.text.UTIL_ADV_TRACE_GetVerboseLevel))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_verbose_get
</UL>

<P><STRONG><a name="[316]"></a>UTIL_ADV_TRACE_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32_adv_trace.o(.text.UTIL_ADV_TRACE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UTIL_ADV_TRACE_Init &rArr; UTIL_MEM_set_8 &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_set_8
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
</UL>

<P><STRONG><a name="[17d]"></a>UTIL_ADV_TRACE_IsBufferEmpty</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32_adv_trace.o(.text.UTIL_ADV_TRACE_IsBufferEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Process
</UL>

<P><STRONG><a name="[31f]"></a>UTIL_ADV_TRACE_PostSendHook</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_app.o(.text.UTIL_ADV_TRACE_PostSendHook))
<BR><BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_SetStopMode
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACE_TxCpltCallback
</UL>

<P><STRONG><a name="[31e]"></a>UTIL_ADV_TRACE_PreSendHook</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_app.o(.text.UTIL_ADV_TRACE_PreSendHook))
<BR><BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_SetStopMode
</UL>
<BR>[Called By]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRACE_Send
</UL>

<P><STRONG><a name="[317]"></a>UTIL_ADV_TRACE_RegisterTimeStampFunction</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32_adv_trace.o(.text.UTIL_ADV_TRACE_RegisterTimeStampFunction))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
</UL>

<P><STRONG><a name="[171]"></a>UTIL_ADV_TRACE_SetVerboseLevel</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32_adv_trace.o(.text.UTIL_ADV_TRACE_SetVerboseLevel))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_verbose_set
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
</UL>

<P><STRONG><a name="[17c]"></a>UTIL_ADV_TRACE_StartRxProcess</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32_adv_trace.o(.text.UTIL_ADV_TRACE_StartRxProcess))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMD_Init
</UL>

<P><STRONG><a name="[327]"></a>UTIL_LPM_EnterLowPower</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32_lpm.o(.text.UTIL_LPM_EnterLowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UTIL_LPM_EnterLowPower
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Idle
</UL>

<P><STRONG><a name="[319]"></a>UTIL_LPM_Init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32_lpm.o(.text.UTIL_LPM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
</UL>

<P><STRONG><a name="[31a]"></a>UTIL_LPM_SetOffMode</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32_lpm.o(.text.UTIL_LPM_SetOffMode))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
</UL>

<P><STRONG><a name="[324]"></a>UTIL_LPM_SetStopMode</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32_lpm.o(.text.UTIL_LPM_SetStopMode))
<BR><BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_PostSendHook
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_PreSendHook
</UL>

<P><STRONG><a name="[18c]"></a>UTIL_MEM_cpy_8</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, stm32_mem.o(.text.UTIL_MEM_cpy_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UTIL_MEM_cpy_8
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_set_config
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_get_config
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IF_Read
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IF_Write
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxGenericConfig
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxGenericConfig
</UL>

<P><STRONG><a name="[30c]"></a>UTIL_MEM_set_8</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32_mem.o(.text.UTIL_MEM_set_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UTIL_MEM_set_8 &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_TX_Start
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_Init
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetPacketStatus
</UL>

<P><STRONG><a name="[325]"></a>UTIL_SEQ_EvtIdle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32_seq.o(.text.UTIL_SEQ_EvtIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_WaitEvt
</UL>

<P><STRONG><a name="[326]"></a>UTIL_SEQ_Idle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_app.o(.text.UTIL_SEQ_Idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_LPM_EnterLowPower
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>

<P><STRONG><a name="[329]"></a>UTIL_SEQ_PostIdle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_seq.o(.text.UTIL_SEQ_PostIdle))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>

<P><STRONG><a name="[328]"></a>UTIL_SEQ_PreIdle</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32_seq.o(.text.UTIL_SEQ_PreIdle))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Run
</UL>

<P><STRONG><a name="[139]"></a>UTIL_SEQ_RegTask</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, stm32_seq.o(.text.UTIL_SEQ_RegTask))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Certif
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaWAN_Init
</UL>

<P><STRONG><a name="[25c]"></a>UTIL_SEQ_Run</STRONG> (Thumb, 348 bytes, Stack size 40 bytes, stm32_seq.o(.text.UTIL_SEQ_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_Idle
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_PostIdle
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_PreIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LoRaWAN_Process
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_EvtIdle
</UL>

<P><STRONG><a name="[264]"></a>UTIL_SEQ_SetEvt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32_seq.o(.text.UTIL_SEQ_SetEvt))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxError
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxTimeout
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxTimeout
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxDone
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDone
</UL>

<P><STRONG><a name="[17f]"></a>UTIL_SEQ_SetTask</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32_seq.o(.text.UTIL_SEQ_SetTask))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnCertifTimer
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnMacProcessNotify
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdProcessNotify
</UL>

<P><STRONG><a name="[320]"></a>UTIL_SEQ_WaitEvt</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, stm32_seq.o(.text.UTIL_SEQ_WaitEvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UTIL_SEQ_WaitEvt &rArr; UTIL_SEQ_EvtIdle &rArr; UTIL_SEQ_Run &rArr; UTIL_SEQ_Idle &rArr; UTIL_LPM_EnterLowPower
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_EvtIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_RX_Start
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TST_TX_Start
</UL>

<P><STRONG><a name="[137]"></a>UTIL_TIMER_Create</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, stm32_timer.o(.text.UTIL_TIMER_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UTIL_TIMER_Create
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Certif
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceOnMcpsIndication
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[245]"></a>UTIL_TIMER_GetCurrentTime</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32_timer.o(.text.UTIL_TIMER_GetCurrentTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UTIL_TIMER_GetCurrentTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioTxDone
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRadioRxDone
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>

<P><STRONG><a name="[1eb]"></a>UTIL_TIMER_GetElapsedTime</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, stm32_timer.o(.text.UTIL_TIMER_GetElapsedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UTIL_TIMER_GetElapsedTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonUpdateBandTimeOff
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonIdentifyChannels
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>

<P><STRONG><a name="[1af]"></a>UTIL_TIMER_IRQ_Handler</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, stm32_timer.o(.text.UTIL_TIMER_IRQ_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UTIL_TIMER_IRQ_Handler &rArr; UTIL_TIMER_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmAEventCallback
</UL>

<P><STRONG><a name="[315]"></a>UTIL_TIMER_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32_timer.o(.text.UTIL_TIMER_Init))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemApp_Init
</UL>

<P><STRONG><a name="[203]"></a>UTIL_TIMER_SetPeriod</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, stm32_timer.o(.text.UTIL_TIMER_SetPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UTIL_TIMER_SetPeriod &rArr; UTIL_TIMER_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceOnMcpsIndication
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxBoosted
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxContinuousWave
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRx
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
</UL>

<P><STRONG><a name="[138]"></a>UTIL_TIMER_Start</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, stm32_timer.o(.text.UTIL_TIMER_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UTIL_TIMER_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Certif
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CertifSend
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_IRQ_Handler
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_SetPeriod
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceTxProcess
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnComplianceTxNextPacketTimerEvent
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxBoosted
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxContinuousWave
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRx
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
</UL>

<P><STRONG><a name="[1ec]"></a>UTIL_TIMER_Stop</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, stm32_timer.o(.text.UTIL_TIMER_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UTIL_TIMER_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceOnMcpsIndication
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHalt
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnAckTimeoutTimerEvent
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow2TimerEvent
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnRxWindow1TimerEvent
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrepareRxDoneAbort
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HandleRadioRxErrorTimeout
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[1e]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32wlxx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32wl55xx_cm4.o(RESET)
</UL>
<P><STRONG><a name="[12b]"></a>lorawan_aes_encrypt</STRONG> (Thumb, 1118 bytes, Stack size 128 bytes, lorawan_aes.o(.text.lorawan_aes_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lorawan_aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
</UL>

<P><STRONG><a name="[12f]"></a>lorawan_aes_set_key</STRONG> (Thumb, 326 bytes, Stack size 36 bytes, lorawan_aes.o(.text.lorawan_aes_set_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lorawan_aes_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_SetKey
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
</UL>

<P><STRONG><a name="[110]"></a>main</STRONG> (Thumb, 170 bytes, Stack size 104 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = main &rArr; MX_LoRaWAN_Init &rArr; LoRaWAN_Init &rArr; LmHandlerConfigure &rArr; LoRaMacMibSetRequestConfirm &rArr; LoRaMacCryptoSetKey &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LoRaWAN_Process
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LoRaWAN_Init
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[12c]"></a>memcpy1</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, utilities.o(.text.memcpy1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerGetKey
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerConfigure
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintIds
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSerializerData
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsSerializeCmds
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsAddCmd
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHalt
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacParserData
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreNvmData
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868ChannelAdd
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923ChannelAdd
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915InitDefaults
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868InitDefaults
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923InitDefaults
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementGetJoinEui
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetJoinEui
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementProcessJoinAccept
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetKey
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetDevEui
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementGetDevEui
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementInitMcuID
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementInit
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacParserJoinAccept
</UL>

<P><STRONG><a name="[250]"></a>memcpyr</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, utilities.o(.text.memcpyr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = memcpyr
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSerializerJoinRequest
</UL>

<P><STRONG><a name="[12a]"></a>memset1</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, utilities.o(.text.memset1))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memset1 &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveNoneStickyCmds
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsSerializeCmds
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsInit
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoInit
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueInit
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsRemoveStickyAnsCmds
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueHandleCb
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreNvmData
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868LinkAdrReq
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923LinkAdrReq
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
</UL>

<P><STRONG><a name="[2c0]"></a>randr</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, utilities.o(.text.randr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = randr
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionBaseUSComputeNext125kHzJoinChannel
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915NextChannel
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868NextChannel
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923NextChannel
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionUS915GetPhyParam
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionEU868GetPhyParam
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionAS923GetPhyParam
</UL>

<P><STRONG><a name="[226]"></a>srand1</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, utilities.o(.text.srand1))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[135]"></a>tiny_sscanf</STRONG> (Thumb, 1868 bytes, Stack size 592 bytes, stm32_tiny_sscanf.o(.text.tiny_sscanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = tiny_sscanf &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_tx_hopping
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_rx
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_tx
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_test_set_config
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_PingSlot_set
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_TransmitPower_set
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx2Frequency_set
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx2DataRate_set
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx2Delay_set
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Rx1Delay_set
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_JoinAcceptDelay2_set
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_JoinAcceptDelay1_set
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Region_set
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DataRate_set
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_Send
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_NetworkID_set
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DevEUI_set
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_DevAddr_set
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_AppSKey_set
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_NwkSKey_set
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_AppKey_set
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_NwkKey_set
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_JoinEUI_set
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_verbose_set
</UL>

<P><STRONG><a name="[323]"></a>tiny_vsnprintf_like</STRONG> (Thumb, 1648 bytes, Stack size 160 bytes, stm32_tiny_vsnprintf.o(.text.tiny_vsnprintf_like))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_snprintf_like
</UL>

<P><STRONG><a name="[105]"></a>vcom_DeInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usart_if.o(.text.vcom_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = vcom_DeInit &rArr; HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_if.o(.rodata.UTIL_TraceDriver)
</UL>
<P><STRONG><a name="[104]"></a>vcom_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usart_if.o(.text.vcom_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = vcom_Init &rArr; MX_LPUART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_LPUART1_UART_Init
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_if.o(.rodata.UTIL_TraceDriver)
</UL>
<P><STRONG><a name="[106]"></a>vcom_ReceiveInit</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, usart_if.o(.text.vcom_ReceiveInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vcom_ReceiveInit &rArr; HAL_UARTEx_StopModeWakeUpSourceConfig &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_EnableStopMode
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_StopModeWakeUpSourceConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_if.o(.rodata.UTIL_TraceDriver)
</UL>
<P><STRONG><a name="[268]"></a>vcom_Resume</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usart_if.o(.text.vcom_Resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vcom_Resume &rArr; HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_ExitStopMode
</UL>

<P><STRONG><a name="[107]"></a>vcom_Trace_DMA</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usart_if.o(.text.vcom_Trace_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vcom_Trace_DMA &rArr; HAL_UART_Transmit_DMA &rArr; HAL_DMA_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_DMA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_if.o(.rodata.UTIL_TraceDriver)
</UL>
<P><STRONG><a name="[2e1]"></a>floorf</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, floorf.o(i.floorf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = floorf &rArr; __aeabi_fadd
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>

<P><STRONG><a name="[32b]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floorf
</UL>

<P><STRONG><a name="[32c]"></a>_fadd</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[2e2]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>

<P><STRONG><a name="[330]"></a>_ffix</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ffix.o(x$fpl$ffix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[26f]"></a>__aeabi_ui2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessMacCommands
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>

<P><STRONG><a name="[367]"></a>_ffltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fflt_clz.o(x$fpl$ffltu), UNUSED)

<P><STRONG><a name="[32f]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffix
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[32e]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[2e0]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeTxPower
</UL>

<P><STRONG><a name="[331]"></a>_fsub</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[188]"></a>FLASH_IF_INT_Erase</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, flash_if.o(.text.FLASH_IF_INT_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FLASH_IF_INT_Erase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IF_Erase
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_IF_Write
</UL>

<P><STRONG><a name="[82]"></a>TimestampNow</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, sys_app.o(.text.TimestampNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = TimestampNow &rArr; tiny_snprintf_like &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGet
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_snprintf_like
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_app.o(.text.SystemApp_Init)
</UL>
<P><STRONG><a name="[321]"></a>tiny_snprintf_like</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, sys_app.o(.text.tiny_snprintf_like))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = tiny_snprintf_like &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tiny_vsnprintf_like
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimestampNow
</UL>

<P><STRONG><a name="[11f]"></a>ADC_ReadChannels</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, adc_if.o(.text.ADC_ReadChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ADC_ReadChannels &rArr; HAL_ADCEx_Calibration_Start &rArr; ADC_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_DeInit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetTemperatureLevel
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_GetBatteryLevel
</UL>

<P><STRONG><a name="[7c]"></a>CmdProcessNotify</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lora_app.o(.text.CmdProcessNotify))
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.text.LoRaWAN_Init)
</UL>
<P><STRONG><a name="[4]"></a>OnRestoreContextRequest</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lora_app.o(.text.OnRestoreContextRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OnRestoreContextRequest &rArr; AT_event_OnRestoreContextRequest &rArr; FLASH_IF_Read &rArr; UTIL_MEM_cpy_8
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_event_OnRestoreContextRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[5]"></a>OnStoreContextRequest</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lora_app.o(.text.OnStoreContextRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = OnStoreContextRequest &rArr; AT_event_OnStoreContextRequest &rArr; FLASH_IF_Write &rArr; FLASH_IF_INT_Erase &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_event_OnStoreContextRequest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[6]"></a>OnMacProcessNotify</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lora_app.o(.text.OnMacProcessNotify))
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[7]"></a>OnNvmDataChange</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lora_app.o(.text.OnNvmDataChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = OnNvmDataChange &rArr; AT_event_OnNvmDataChange &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_event_OnNvmDataChange
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[8]"></a>OnJoinRequest</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lora_app.o(.text.OnJoinRequest))
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[9]"></a>OnTxData</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lora_app.o(.text.OnTxData))
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[a]"></a>OnRxData</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lora_app.o(.text.OnRxData))
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[b]"></a>OnClassChange</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lora_app.o(.text.OnClassChange))
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[c]"></a>OnBeaconStatusChange</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lora_app.o(.text.OnBeaconStatusChange))
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[d]"></a>OnSysTimeUpdate</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lora_app.o(.text.OnSysTimeUpdate))
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[e]"></a>OnTxPeriodicityChanged</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lora_app.o(.text.OnTxPeriodicityChanged))
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[f]"></a>OnTxFrameCtrlChanged</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lora_app.o(.text.OnTxFrameCtrlChanged))
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[10]"></a>OnPingSlotPeriodicityChanged</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lora_app.o(.text.OnPingSlotPeriodicityChanged))
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[11]"></a>OnSystemReset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lora_app.o(.text.OnSystemReset))
<BR>[Address Reference Count : 1]<UL><LI> lora_app.o(.data..L_MergedGlobals)
</UL>
<P><STRONG><a name="[166]"></a>__NVIC_SystemReset</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lora_at.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_restore_factory_settings
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT_reset
</UL>

<P><STRONG><a name="[63]"></a>OnCertifTimer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lora_at.o(.text.OnCertifTimer))
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_SEQ_SetTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_at.o(.text.AT_Certif)
</UL>
<P><STRONG><a name="[64]"></a>CertifSend</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lora_at.o(.text.CertifSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = CertifSend &rArr; LmHandlerSend &rArr; LmHandlerJoin &rArr; LoRaMacMlmeRequest &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerJoinStatus
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_at.o(.text.AT_Certif)
</UL>
<P><STRONG><a name="[65]"></a>CMD_GetChar</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, lora_command.o(.text.CMD_GetChar))
<BR>[Address Reference Count : 1]<UL><LI> lora_command.o(.text.CMD_Init)
</UL>
<P><STRONG><a name="[89]"></a>UART_RxISR_8BIT</STRONG> (Thumb, 438 bytes, Stack size 0 bytes, stm32wlxx_hal_uart.o(.text.UART_RxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_RxISR_8BIT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32wlxx_hal_uart.o(.text.UART_RxISR_8BIT_FIFOEN)
<LI> stm32wlxx_hal_uart.o(.text.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[8a]"></a>UART_RxISR_8BIT_FIFOEN</STRONG> (Thumb, 798 bytes, Stack size 40 bytes, stm32wlxx_hal_uart.o(.text.UART_RxISR_8BIT_FIFOEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_RxISR_8BIT_FIFOEN &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32wlxx_hal_uart.o(.text.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[88]"></a>UART_RxISR_16BIT</STRONG> (Thumb, 434 bytes, Stack size 0 bytes, stm32wlxx_hal_uart.o(.text.UART_RxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_RxISR_16BIT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32wlxx_hal_uart.o(.text.UART_RxISR_16BIT_FIFOEN)
<LI> stm32wlxx_hal_uart.o(.text.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[8b]"></a>UART_RxISR_16BIT_FIFOEN</STRONG> (Thumb, 794 bytes, Stack size 40 bytes, stm32wlxx_hal_uart.o(.text.UART_RxISR_16BIT_FIFOEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_RxISR_16BIT_FIFOEN &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32wlxx_hal_uart.o(.text.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[67]"></a>UART_DMAError</STRONG> (Thumb, 474 bytes, Stack size 0 bytes, stm32wlxx_hal_uart.o(.text.UART_DMAError))
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32wlxx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[68]"></a>UART_DMATransmitCplt</STRONG> (Thumb, 176 bytes, Stack size 0 bytes, stm32wlxx_hal_uart.o(.text.UART_DMATransmitCplt))
<BR><BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32wlxx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[69]"></a>UART_DMATxHalfCplt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32wlxx_hal_uart.o(.text.UART_DMATxHalfCplt))
<BR><BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32wlxx_hal_uart.o(.text.HAL_UART_Transmit_DMA)
</UL>
<P><STRONG><a name="[66]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32wlxx_hal_uart.o(.text.UART_DMAAbortOnError))
<BR><BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32wlxx_hal_uart.o(.text.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[12]"></a>LmhpComplianceInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, lmhpcompliance.o(.text.LmhpComplianceInit))
<BR>[Address Reference Count : 1]<UL><LI> lmhpcompliance.o(.data.LmhpCompliancePackage)
</UL>
<P><STRONG><a name="[13]"></a>LmhpComplianceIsInitialized</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lmhpcompliance.o(.text.LmhpComplianceIsInitialized))
<BR>[Address Reference Count : 1]<UL><LI> lmhpcompliance.o(.data.LmhpCompliancePackage)
</UL>
<P><STRONG><a name="[14]"></a>LmhpComplianceIsRunning</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lmhpcompliance.o(.text.LmhpComplianceIsRunning))
<BR>[Address Reference Count : 1]<UL><LI> lmhpcompliance.o(.data.LmhpCompliancePackage)
</UL>
<P><STRONG><a name="[15]"></a>LmhpComplianceProcess</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lmhpcompliance.o(.text.LmhpComplianceProcess))
<BR>[Address Reference Count : 1]<UL><LI> lmhpcompliance.o(.data.LmhpCompliancePackage)
</UL>
<P><STRONG><a name="[16]"></a>LmhpComplianceOnMcpsConfirm</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lmhpcompliance.o(.text.LmhpComplianceOnMcpsConfirm))
<BR>[Address Reference Count : 1]<UL><LI> lmhpcompliance.o(.data.LmhpCompliancePackage)
</UL>
<P><STRONG><a name="[17]"></a>LmhpComplianceOnMcpsIndication</STRONG> (Thumb, 726 bytes, Stack size 64 bytes, lmhpcompliance.o(.text.LmhpComplianceOnMcpsIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 880 + Unknown Stack Size
<LI>Call Chain = LmhpComplianceOnMcpsIndication &rArr; LoRaMacMlmeRequest &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Create
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_SetPeriod
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacTestSetDutyCycleOn
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceTxProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhpcompliance.o(.data.LmhpCompliancePackage)
</UL>
<P><STRONG><a name="[72]"></a>OnComplianceTxNextPacketTimerEvent</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, lmhpcompliance.o(.text.OnComplianceTxNextPacketTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OnComplianceTxNextPacketTimerEvent &rArr; UTIL_TIMER_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhpcompliance.o(.text.LmhpComplianceOnMcpsIndication)
</UL>
<P><STRONG><a name="[204]"></a>LmhpComplianceTxProcess</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, lmhpcompliance.o(.text.LmhpComplianceTxProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LmhpComplianceTxProcess &rArr; UTIL_TIMER_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmhpComplianceOnMcpsIndication
</UL>

<P><STRONG><a name="[18]"></a>LmhpComplianceOnMlmeConfirm</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lmhpcompliance.o(.text.LmhpComplianceOnMlmeConfirm))
<BR>[Address Reference Count : 1]<UL><LI> lmhpcompliance.o(.data.LmhpCompliancePackage)
</UL>
<P><STRONG><a name="[26a]"></a>PrintKey</STRONG> (Thumb, 280 bytes, Stack size 120 bytes, soft-se.o(.text.PrintKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = PrintKey &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementPrintSessionKeys
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementPrintKeys
</UL>

<P><STRONG><a name="[269]"></a>PrintIds</STRONG> (Thumb, 208 bytes, Stack size 80 bytes, soft-se.o(.text.PrintIds))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = PrintIds &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementPrintSessionKeys
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementPrintKeys
</UL>

<P><STRONG><a name="[180]"></a>ComputeCmac</STRONG> (Thumb, 220 bytes, Stack size 320 bytes, soft-se.o(.text.ComputeCmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_SetKey
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementProcessJoinAccept
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementVerifyAesCmac
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementComputeAesCmac
</UL>

<P><STRONG><a name="[1e0]"></a>HandleRadioRxErrorTimeout</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, loramac.o(.text.HandleRadioRxErrorTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HandleRadioRxErrorTimeout &rArr; UTIL_TIMER_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsBeaconExpected
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBBeaconTimerEvent
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetBeaconState
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueSetStatusCmn
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBMulticastSlotTimerEvent
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetMulticastSlotState
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsMulticastExpected
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBPingSlotTimerEvent
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSetPingSlotState
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsPingExpected
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_GetElapsedTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[173]"></a>AckTimeoutRetriesFinalize</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, loramac.o(.text.AckTimeoutRetriesFinalize))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = AckTimeoutRetriesFinalize &rArr; RegionInitDefaults &rArr; RegionEU868InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[175]"></a>AckTimeoutRetriesProcess</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, loramac.o(.text.AckTimeoutRetriesProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = AckTimeoutRetriesProcess &rArr; RegionGetPhyParam &rArr; RegionUS915GetPhyParam &rArr; RegionCommonGetNextLowerTxDr &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[22a]"></a>ScheduleTx</STRONG> (Thumb, 822 bytes, Stack size 88 bytes, loramac.o(.text.ScheduleTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_SetPeriod
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoSecureMessage
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoPrepareJoinRequest
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBStopRxSlots
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsUplinkCollision
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsBeaconModeActive
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSerializerData
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSerializerJoinRequest
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsBeaconExpected
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoGetFCntUp
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsGetSizeSerializedCmds
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBHaltBeaconing
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsMulticastExpected
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBIsPingExpected
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGetMcuTime
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSub
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionApplyDrOffset
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNextChannel
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxConfig
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMcpsRequest
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendReJoinReq
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnTxDelayedTimerEvent
</UL>

<P><STRONG><a name="[21f]"></a>LoRaMacHandleNvm</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, loramac.o(.text.LoRaMacHandleNvm))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LoRaMacHandleNvm &rArr; Crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacHalt
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[192]"></a>GetFCntDown</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, loramac.o(.text.GetFCntDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GetFCntDown &rArr; LoRaMacCryptoGetFCntDown
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoGetFCntDown
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[24e]"></a>PrepareRxDoneAbort</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, loramac.o(.text.PrepareRxDoneAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PrepareRxDoneAbort &rArr; UTIL_TIMER_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[24f]"></a>ProcessMacCommands</STRONG> (Thumb, 1356 bytes, Stack size 104 bytes, loramac.o(.text.ProcessMacCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = ProcessMacCommands &rArr; RegionLinkAdrReq &rArr; RegionUS915LinkAdrReq &rArr; RegionCommonLinkAdrReqVerifyParams &rArr; RegionCommonChanVerifyDr
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGet
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBDeviceTimeAns
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSet
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeAdd
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBBeaconTimingAns
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBBeaconFreqReq
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBPingSlotInfoAns
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBPingSlotChannelReq
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsGetCmdSize
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCommandsAddCmd
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueSetStatus
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueIsCmdActive
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeSub
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionDlChannelReq
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionTxParamSetupReq
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionNewChannelReq
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxParamSetupReq
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionLinkAdrReq
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionGetPhyParam
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacProcess
</UL>

<P><STRONG><a name="[234]"></a>OpenContinuousRxCWindow</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, loramac.o(.text.OpenContinuousRxCWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = OpenContinuousRxCWindow &rArr; RegionRxConfig &rArr; RegionEU868RxConfig &rArr; RegionCommonRxConfigPrint &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[222]"></a>ResetMacParameters</STRONG> (Thumb, 318 bytes, Stack size 72 bytes, loramac.o(.text.ResetMacParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = ResetMacParameters &rArr; RegionInitDefaults &rArr; RegionEU868InitDefaults &rArr; RegionCommonChanMaskCopy
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBInit
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionInitDefaults
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitialization
</UL>

<P><STRONG><a name="[73]"></a>OnTxDelayedTimerEvent</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, loramac.o(.text.OnTxDelayedTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = OnTxDelayedTimerEvent &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacConfirmQueueSetStatusCmn
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[74]"></a>OnRxWindow1TimerEvent</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, loramac.o(.text.OnRxWindow1TimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = OnRxWindow1TimerEvent &rArr; RegionRxConfig &rArr; RegionEU868RxConfig &rArr; RegionCommonRxConfigPrint &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[75]"></a>OnRxWindow2TimerEvent</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, loramac.o(.text.OnRxWindow2TimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = OnRxWindow2TimerEvent &rArr; RegionRxConfig &rArr; RegionEU868RxConfig &rArr; RegionCommonRxConfigPrint &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[76]"></a>OnAckTimeoutTimerEvent</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, loramac.o(.text.OnAckTimeoutTimerEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OnAckTimeoutTimerEvent &rArr; UTIL_TIMER_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[77]"></a>OnRadioRxDone</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, loramac.o(.text.OnRadioRxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = OnRadioRxDone &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_GetCurrentTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[78]"></a>OnRadioRxTimeout</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, loramac.o(.text.OnRadioRxTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = OnRadioRxTimeout &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[79]"></a>OnRadioTxDone</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, loramac.o(.text.OnRadioTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = OnRadioTxDone &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTimeGet
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_GetCurrentTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[7a]"></a>OnRadioTxTimeout</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, loramac.o(.text.OnRadioTxTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = OnRadioTxTimeout &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[7b]"></a>OnRadioRxError</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, loramac.o(.text.OnRadioRxError))
<BR>[Address Reference Count : 1]<UL><LI> loramac.o(.text.LoRaMacInitialization)
</UL>
<P><STRONG><a name="[230]"></a>SwitchClass</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, loramac.o(.text.SwitchClass))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = SwitchClass &rArr; RegionRxConfig &rArr; RegionEU868RxConfig &rArr; RegionCommonRxConfigPrint &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSwitchClass
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionRxConfig
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionComputeRxWindowParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[238]"></a>RestoreNvmData</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, loramac.o(.text.RestoreNvmData))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RestoreNvmData &rArr; Crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibSetRequestConfirm
</UL>

<P><STRONG><a name="[23c]"></a>SendReJoinReq</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, loramac.o(.text.SendReJoinReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = SendReJoinReq &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacClassBSwitchClass
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScheduleTx
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementGetJoinEui
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementGetDevEui
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[23f]"></a>SetTxContinuousWave</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, loramac.o(.text.SetTxContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SetTxContinuousWave &rArr; RegionSetContinuousWave &rArr; RegionUS915SetContinuousWave &rArr; RegionCommonComputeTxPower &rArr; floorf &rArr; __aeabi_fadd
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionSetContinuousWave
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
</UL>

<P><STRONG><a name="[186]"></a>DeriveSessionKey10x</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, loramaccrypto.o(.text.DeriveSessionKey10x))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = DeriveSessionKey10x &rArr; SecureElementDeriveAndStoreKey &rArr; SecureElementSetKey &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementDeriveAndStoreKey
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoHandleJoinAccept
</UL>

<P><STRONG><a name="[21c]"></a>PayloadEncrypt</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, loramaccrypto.o(.text.PayloadEncrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = PayloadEncrypt &rArr; SecureElementAesEncrypt &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementAesEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
</UL>

<P><STRONG><a name="[21d]"></a>UpdateFCntDown</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, loramaccrypto.o(.text.UpdateFCntDown))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacCryptoUnsecureMessage
</UL>

<P><STRONG><a name="[6a]"></a>McpsConfirm</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, lmhandler.o(.text.McpsConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = McpsConfirm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhandler.o(.text.LmHandlerInit)
</UL>
<P><STRONG><a name="[6b]"></a>McpsIndication</STRONG> (Thumb, 144 bytes, Stack size 64 bytes, lmhandler.o(.text.McpsIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032 + Unknown Stack Size
<LI>Call Chain = McpsIndication &rArr; LmHandlerSend &rArr; LmHandlerJoin &rArr; LoRaMacMlmeRequest &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerSend
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerPackagesNotify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhandler.o(.text.LmHandlerInit)
</UL>
<P><STRONG><a name="[6c]"></a>MlmeConfirm</STRONG> (Thumb, 310 bytes, Stack size 96 bytes, lmhandler.o(.text.MlmeConfirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = MlmeConfirm &rArr; LoRaMacMlmeRequest &rArr; SendReJoinReq &rArr; ScheduleTx &rArr; LoRaMacCryptoSecureMessage &rArr; SecureElementComputeAesCmac &rArr; ComputeCmac &rArr; AES_CMAC_Final &rArr; lorawan_aes_encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LmHandlerRequestClass
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMlmeRequest
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacMibGetRequestConfirm
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementPrintSessionKeys
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureElementSetDevAddr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhandler.o(.text.LmHandlerInit)
</UL>
<P><STRONG><a name="[6d]"></a>MlmeIndication</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, lmhandler.o(.text.MlmeIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MlmeIndication
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lmhandler.o(.text.LmHandlerInit)
</UL>
<P><STRONG><a name="[261]"></a>LmHandlerPackagesNotify</STRONG> (Thumb, 366 bytes, Stack size 16 bytes, lmhandler.o(.text.LmHandlerPackagesNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LmHandlerPackagesNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McpsIndication
</UL>

<P><STRONG><a name="[cc]"></a>RadioInit</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, radio.o(.text.RadioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = RadioInit &rArr; SUBGRF_Init &rArr; RBI_Init &rArr; BSP_RADIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Create
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSleep
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetDioIrqParams
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTxParams
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetBufferBaseAddress
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRegulatorMode
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[7f]"></a>RadioOnDioIrq</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, radio.o(.text.RadioOnDioIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = RadioOnDioIrq &rArr; RadioIrqProcess &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.text.RadioInit)
</UL>
<P><STRONG><a name="[80]"></a>RadioOnTxTimeoutIrq</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, radio.o(.text.RadioOnTxTimeoutIrq))
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.text.RadioInit)
</UL>
<P><STRONG><a name="[81]"></a>RadioOnRxTimeoutIrq</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, radio.o(.text.RadioOnRxTimeoutIrq))
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.text.RadioInit)
</UL>
<P><STRONG><a name="[cd]"></a>RadioGetStatus</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, radio.o(.text.RadioGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RadioGetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetOperatingMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[ce]"></a>RadioSetModem</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, radio.o(.text.RadioSetModem))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + In Cycle
<LI>Call Chain = RadioSetModem &rArr;  RadioSetModem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketType
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_SetRadioModem
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxGenericConfig
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxGenericConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetPublicNetwork
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[cf]"></a>RadioSetChannel</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio.o(.text.RadioSetChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RadioSetChannel &rArr; SUBGRF_SetRfFrequency &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRfFrequency
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[d0]"></a>RadioIsChannelFree</STRONG> (Thumb, 348 bytes, Stack size 48 bytes, radio.o(.text.RadioIsChannelFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = RadioIsChannelFree &rArr; SUBGRF_SetModulationParams &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_GetElapsedTime
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_GetCurrentTime
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetRssiInst
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetRadioWakeUpTime
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRx
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSwitch
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_ReceiveInit
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_Is_Init
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetWhiteningSeed
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSyncWord
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketParams
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetModulationParams
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetFskBandwidthRegValue
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetStopRxTimerOnPreambleDetect
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_DeInit
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetStandby
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRfFrequency
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketType
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_SetRadioModem
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetDioIrqParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[d1]"></a>RadioRandom</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, radio.o(.text.RadioRandom))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = RadioRandom &rArr; SUBGRF_GetRandom &rArr; HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetRandom
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetDioIrqParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[d2]"></a>RadioSetRxConfig</STRONG> (Thumb, 770 bytes, Stack size 56 bytes, radio.o(.text.RadioSetRxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = RadioSetRxConfig &rArr; SUBGRF_SetModulationParams &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetLoRaSymbNumTimeout
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadRegister
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetWhiteningSeed
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSyncWord
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketParams
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetModulationParams
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetFskBandwidthRegValue
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetStopRxTimerOnPreambleDetect
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_DeInit
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetStandby
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketType
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_SetRadioModem
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[d3]"></a>RadioSetTxConfig</STRONG> (Thumb, 458 bytes, Stack size 48 bytes, radio.o(.text.RadioSetTxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = RadioSetTxConfig &rArr; SUBGRF_SetModulationParams &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_SetAntSwitch
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRfTxPower
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetWhiteningSeed
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSyncWord
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketParams
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetModulationParams
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetFskBandwidthRegValue
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_DeInit
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetStandby
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketType
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_SetRadioModem
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[d4]"></a>RadioCheckRfFrequency</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio.o(.text.RadioCheckRfFrequency))
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[d5]"></a>RadioTimeOnAir</STRONG> (Thumb, 424 bytes, Stack size 24 bytes, radio.o(.text.RadioTimeOnAir))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RadioTimeOnAir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[d6]"></a>RadioSend</STRONG> (Thumb, 712 bytes, Stack size 40 bytes, radio.o(.text.RadioSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = RadioSend &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_SetPeriod
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SendPayload
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_TransmitInit
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadRegister
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSwitch
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_Is_Init
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketParams
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetDioIrqParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[d7]"></a>RadioSleep</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, radio.o(.text.RadioSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = RadioSleep &rArr; HAL_Delay &rArr; TIMER_IF_DelayMs &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[d8]"></a>RadioStandby</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, radio.o(.text.RadioStandby))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RadioStandby &rArr; SUBGRF_SetStandby &rArr; HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetStandby
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[d9]"></a>RadioRx</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, radio.o(.text.RadioRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RadioRx &rArr; UTIL_TIMER_SetPeriod &rArr; UTIL_TIMER_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_SetPeriod
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRx
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSwitch
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_ReceiveInit
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_Is_Init
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetDioIrqParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[da]"></a>RadioStartCad</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, radio.o(.text.RadioStartCad))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RadioStartCad &rArr; SUBGRF_SetSwitch &rArr; HAL_SUBGHZ_ReadRegisters
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetCad
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSwitch
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetDioIrqParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[db]"></a>RadioSetTxContinuousWave</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, radio.o(.text.RadioSetTxContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = RadioSetTxContinuousWave &rArr; SUBGRF_SetRfTxPower &rArr; SUBGRF_SetTxParams &rArr; HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_SetPeriod
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTxContinuousWave
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRfTxPower
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSwitch
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRfFrequency
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[dc]"></a>RadioRssi</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, radio.o(.text.RadioRssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RadioRssi &rArr; SUBGRF_GetRssiInst &rArr; HAL_SUBGHZ_ExecGetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetRssiInst
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[dd]"></a>RadioWrite</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio.o(.text.RadioWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RadioWrite &rArr; SUBGRF_WriteRegister &rArr; HAL_SUBGHZ_WriteRegisters
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[de]"></a>RadioRead</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio.o(.text.RadioRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RadioRead &rArr; SUBGRF_ReadRegister &rArr; HAL_SUBGHZ_ReadRegisters
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[df]"></a>RadioWriteRegisters</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio.o(.text.RadioWriteRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RadioWriteRegisters &rArr; SUBGRF_WriteRegisters &rArr; HAL_SUBGHZ_WriteRegisters
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegisters
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[e0]"></a>RadioReadRegisters</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio.o(.text.RadioReadRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RadioReadRegisters &rArr; SUBGRF_ReadRegisters &rArr; HAL_SUBGHZ_ReadRegisters
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadRegisters
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[e1]"></a>RadioSetMaxPayloadLength</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, radio.o(.text.RadioSetMaxPayloadLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = RadioSetMaxPayloadLength &rArr; SUBGRF_SetPacketParams &rArr; HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[e2]"></a>RadioSetPublicNetwork</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, radio.o(.text.RadioSetPublicNetwork))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = RadioSetPublicNetwork &rArr; RadioSetModem &rArr;  RadioSetModem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[e3]"></a>RadioGetWakeupTime</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, radio.o(.text.RadioGetWakeupTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RadioGetWakeupTime
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetRadioWakeUpTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[e4]"></a>RadioIrqProcess</STRONG> (Thumb, 856 bytes, Stack size 24 bytes, radio.o(.text.RadioIrqProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = RadioIrqProcess &rArr; UTIL_ADV_TRACE_COND_FSend &rArr; tiny_vsnprintf_like &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Stop
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetCFO
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetPacketStatus
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetPayload
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_ReceivePayload
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_DeInit_TxLongPacket
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_Is_LongPacketModeEnabled
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadRegister
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_Is_Init
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetStandby
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetOperatingMode
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetDioIrqParams
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioOnDioIrq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[e5]"></a>RadioRxBoosted</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, radio.o(.text.RadioRxBoosted))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RadioRxBoosted &rArr; UTIL_TIMER_SetPeriod &rArr; UTIL_TIMER_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_Start
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_TIMER_SetPeriod
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRxBoosted
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSwitch
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_ReceiveInit
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_Is_Init
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetDioIrqParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[e6]"></a>RadioSetRxDutyCycle</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, radio.o(.text.RadioSetRxDutyCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = RadioSetRxDutyCycle &rArr; SUBGRF_SetRxDutyCycle &rArr; HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRxDutyCycle
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSwitch
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetDioIrqParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[e7]"></a>RadioTxPrbs</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, radio.o(.text.RadioTxPrbs))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RadioTxPrbs &rArr; SUBGRF_SetSwitch &rArr; HAL_SUBGHZ_ReadRegisters
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTx
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTxInfinitePreamble
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSwitch
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[e8]"></a>RadioTxCw</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, radio.o(.text.RadioTxCw))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = RadioTxCw &rArr; SUBGRF_SetRfTxPower &rArr; SUBGRF_SetTxParams &rArr; HAL_SUBGHZ_ExecSetCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetTxContinuousWave
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRfTxPower
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSwitch
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[e9]"></a>RadioSetRxGenericConfig</STRONG> (Thumb, 588 bytes, Stack size 56 bytes, radio.o(.text.RadioSetRxGenericConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = RadioSetRxGenericConfig &rArr; SUBGRF_SetModulationParams &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_cpy_8
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetCrcPolynomial
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_Init
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetLoRaSymbNumTimeout
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadRegister
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetWhiteningSeed
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSyncWord
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketParams
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetModulationParams
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_GetFskBandwidthRegValue
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetStopRxTimerOnPreambleDetect
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_DeInit
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetStandby
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketType
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_SetRadioModem
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[ea]"></a>RadioSetTxGenericConfig</STRONG> (Thumb, 724 bytes, Stack size 56 bytes, radio.o(.text.RadioSetTxGenericConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = RadioSetTxGenericConfig &rArr; SUBGRF_SetModulationParams &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_MEM_cpy_8
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetCrcPolynomial
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_Init
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_SetAntSwitch
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetRfTxPower
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_ReadRegister
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetWhiteningSeed
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetSyncWord
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketParams
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetModulationParams
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_DeInit
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetStandby
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_WriteRegister
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SUBGRF_SetPacketType
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFW_SetRadioModem
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[ed]"></a>RadioLrFhssSetCfg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio.o(.text.RadioLrFhssSetCfg))
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[ee]"></a>RadioLrFhssGetTimeOnAirInMs</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio.o(.text.RadioLrFhssGetTimeOnAirInMs))
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.rodata.Radio)
</UL>
<P><STRONG><a name="[8c]"></a>TRACE_TxCpltCallback</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, stm32_adv_trace.o(.text.TRACE_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TRACE_TxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_PostSendHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32_adv_trace.o(.text.UTIL_ADV_TRACE_Init)
</UL>
<P><STRONG><a name="[31d]"></a>TRACE_Send</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, stm32_adv_trace.o(.text.TRACE_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TRACE_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_PreSendHook
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTIL_ADV_TRACE_COND_FSend
</UL>

<P><STRONG><a name="[332]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
</UL>

<P><STRONG><a name="[32d]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub_clz.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
